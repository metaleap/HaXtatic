<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <link rel="self" type="application/rss+xml" href="http://metaleap.github.io/haxtatic/-xml/basics.atom" />
    <title>metaleap.github.io Basics</title>
    <subtitle>This material may appear "unduly exhaustive" at
	first glance, but this is all blatantly-simple-stuff
	and mostly just spelled out in (almost) every last
	minor detail for completeness and future reference.    
	   Notably no article on    "how to author pages"    .
	That's because there's nothing to it once a quick note
	is made of                                  where to place them    ,
	                                  which outer-template is applied during processing       how    ,
	as well as the diverse range of                              haXtags    
	that any page (indeed any user-authored/-customized file
	in a project) may embed and combine in any manner.</subtitle>
    <id>http://metaleap.github.io/haxtatic/basics/index.html</id>
    <link href="http://metaleap.github.io/haxtatic/basics/index.html"/>
    <updated>2016-12-21T00:00:00Z</updated>
    <entry>
        <title type="html">The project directory</title>
        <summary type="html">Any project resides in its own project-directory with a predefined (auto-generated) minimal-structure of 4-5 standard folders and 3-4 standard files. Just the usual, bog-standard &quot;content/templates/static/config&quot; stuff! But here&apos;s some more color on the finer details, starting with the standard folders belonging to the project-directory:</summary>
        <link href="../basics/projdir.html"/><author><name>metaleap.github.io</name></author>
        <id>tag:metaleap.github.io,2016-12-21:haxtatic/basics/projdir.html</id>
        <updated>2016-12-21T00:00:00Z</updated>
        <content type="html">&lt;h1&gt;The project directory&lt;/h1&gt;
&lt;p class=&quot;up&quot;&gt;Any project resides in its own project-directory with a predefined (auto-generated) minimal-structure of 4-5 standard folders and 3-4 standard files. Just the usual, bog-standard &quot;content/templates/static/config&quot; stuff! But here&apos;s some more color on the finer details, starting with the standard folders belonging to the project-directory:&lt;/p&gt;
&lt;ul class=&quot;up&quot;&gt;
    &lt;li&gt;&lt;b&gt;default-build/&lt;/b&gt; &amp;mdash; generated output&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;pages/&lt;/b&gt; &amp;mdash; all authored content source pages: likely-mostly-unstyled/unthemed/inner-body-only HTML files (but technically, any text files that need processing of &lt;a href=&quot;../tags/index.html&quot;&gt;haXtags&lt;/a&gt;)&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;static/&lt;/b&gt; &amp;mdash; raw files to batch-copy unprocessed straight into &lt;b&gt;default-build&lt;/b&gt;&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;tmpl/&lt;/b&gt; &amp;mdash; templates and snippets&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;_cache_tmp/&lt;/b&gt; &amp;mdash; temporary cache files&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&quot;hd-note&quot;&gt;Of course, these names are ultimately customizable and multiple &lt;i&gt;build&lt;/i&gt;, &lt;i&gt;static&lt;/i&gt; and &lt;i&gt;pages&lt;/i&gt;
directories are possible, once comfortable with the overall operations of &lt;i&gt;HaXtatic&lt;/i&gt; &amp;mdash;details &lt;a href=&quot;../basics/haxproj.html#cdecl&quot;&gt;here&lt;/a&gt;&amp;mdash;
but throughout the documentation the above defaults will be used for &lt;b&gt;simplicity&lt;/b&gt; and may be be mentally translated to
equally apply to any customized project-directory structurings.&lt;/p&gt;
&lt;span id=&quot;run&quot;&gt;&lt;h2 id=&quot;Get started&quot;&gt;Get started&lt;/h2&gt;&lt;/span&gt;
&lt;p&gt;As &lt;a href=&quot;../index.html#&amp;quot;Quick&amp;quot; start&quot;&gt;described earlier&lt;/a&gt;, one runs &lt;i&gt;HaXtatic&lt;/i&gt; specifying &quot;the project-directory to process&quot; and any missing parts from the above essentials will be (re)created in-place.&lt;/p&gt;
&lt;p&gt;Example, to create a new site project named &lt;b&gt;mydemosite.foo&lt;/b&gt; (inside the existing &lt;i&gt;~/dev/&lt;/i&gt; directory in this case) &lt;ul&gt;&lt;li&gt;just run from inside the &lt;i&gt;HaXtatic&lt;/i&gt; code-base&apos;s &lt;i&gt;src&lt;/i&gt; directory:&lt;br/&gt;&lt;code&gt;&lt;a href=&quot;http://www.haskell.org/downloads#stack&quot;&gt;stack&lt;/a&gt; ./@HaxMain.hs ~/dev/mydemosite.foo&lt;/code&gt;&lt;/li&gt;&lt;li&gt;or with a compiled executable binary (eg. for extra speed if so inclined), of course&lt;br/&gt;&lt;code&gt;my-haxtatic-exe ~/dev/mydemosite.foo&lt;/code&gt; works equally&lt;/li&gt;&lt;/ul&gt; and the following is generated:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../-pics/otiosely/long/path/fresh%20project-directory.png&quot; alt=&quot;A &apos;freshly made&apos; project-directory&quot; title=&quot;A &apos;freshly made&apos; project-directory&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The on-screen output will be something like:&lt;/p&gt;
&lt;pre&gt;
==== HAXTATIC ====


1/6     Reading essential project files (or creating them)..
        &amp;gt;&amp;gt;      default.haxproj [ OK ]
        &amp;gt;&amp;gt;      tmpl\default.haxtmpl.html [ OK ]
        &amp;gt;&amp;gt;      tmpl\_hax_blokindex.haxsnip.html [ OK ]

2/6     Planning the work..
        -&amp;gt;      No content-source files whatsoever.. making one for you:
        &amp;gt;&amp;gt;      pages\index.html [ OK ]
        -&amp;gt;      Static files: will copy 0, skipping 0
        -&amp;gt;      Content pages: will generate 1+0, skipping 0
        -&amp;gt;      XML files: will generate 0 feeds, skipping 0
                           plus 1 sitemap(s)

3/6     Copying 0/0 file(s) to:
        ~&amp;gt;      D:\dev\mydemosite.foo\default-build

4/6     Generating 1/1 file(s) in:
        ~&amp;gt;      D:\dev\mydemosite.foo\default-build
        &amp;gt;&amp;gt;      index.html [ OK ]

5/6     Writing 1/1 XML file(s) to:
        ~&amp;gt;      D:\dev\mydemosite.foo\default-build
        &amp;gt;&amp;gt;      sitemap.xml [ OK ]

6/6     Copying only the 2 newly (over)written file(s) also to:
        ~&amp;gt;      (skipping this step.)


Wrote 2 files in 0.07s:
        0.01s pre-templating &amp;amp; planning
        0.03s page templating &amp;amp; generation (1x ~0.036s)
        0.01s XML file generation (1x ~0.01s)
        0s misc. &amp;amp; file-copying

==== Bye now! ====
&lt;/pre&gt;
&lt;p&gt;
	Now just proceed creating/modifying contents/templates/settings/etc. within this directory structure and then simply run the same command-line again to refresh &lt;b&gt;default-build&lt;/b&gt; with any changes made since the last run.
&lt;/p&gt;
&lt;p&gt;Of note: &lt;i&gt;HaXtatic&lt;/i&gt; &lt;b&gt;never deletes&lt;/b&gt; any files whatsoever; and also &lt;b&gt;only writes&lt;/b&gt; files to the designated &lt;i&gt;build&lt;/i&gt; folder(s) and &lt;i&gt;_cache_tmp/&lt;/i&gt; &amp;mdash; plus re-creating the handful of standard folders/files described here &lt;b&gt;only&lt;/b&gt; if entirely missing.&lt;/p&gt;
&lt;h2 id=&quot;Standard folders&quot;&gt;Standard folders&lt;/h2&gt;
&lt;h3&gt;default-build/&lt;/h3&gt;
&lt;p&gt;Contains the complete generated site after a successful run. (Technically, contains all outputs from all previous runs ever since the directory was created or last cleaned up manually.)&lt;/p&gt;
&lt;h3&gt;static/&lt;/h3&gt;
&lt;p&gt;All (changed or new) files and folders (if any) will just be batch-copied over straight into &lt;b&gt;default-build&lt;/b&gt; (with no processing) as the first step.&lt;/p&gt;
&lt;h3&gt;pages/&lt;/h3&gt;
&lt;p&gt;All (changed or new) files and folders in here will then be processed by applying a &lt;a href=&quot;../basics/tmplsnip.html&quot;&gt;template&lt;/a&gt; and the resulting corresponding output file goes into &lt;b&gt;default-build&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;If and &lt;i&gt;only&lt;/i&gt; if &lt;b&gt;pages&lt;/b&gt; has &lt;i&gt;no files at all&lt;/i&gt;, will a default &lt;code&gt;index.html&lt;/code&gt; be created once (to get new projects started with).&lt;/p&gt;
&lt;h3&gt;tmpl/&lt;/h3&gt;
&lt;p&gt;To contain custom as well as the auto-generated default &lt;a href=&quot;../basics/tmplsnip.html&quot;&gt;templates&lt;/a&gt; and &lt;a href=&quot;../basics/tmplsnip.html#snippets&quot;&gt;snippets&lt;/a&gt; used during processing of the content source files from &lt;b&gt;pages&lt;/b&gt;.&lt;/p&gt;
&lt;h3&gt;_cache_tmp/&lt;/h3&gt;
&lt;p&gt;Cached per-processed-page intermediate-representations to slightly speed up rebuilds. This may be manually cleared (or &lt;a href=&quot;../basics/haxproj.html#cmisc&quot;&gt;changed/disabled&lt;/a&gt;) whenever deemed prudent (such as while customizing &lt;i&gt;HaXtatic&lt;/i&gt;&apos;s Haskell code-base itself).&lt;/p&gt;
&lt;span id=&quot;files&quot;&gt;&lt;h2 id=&quot;Standard files&quot;&gt;Standard files&lt;/h2&gt;&lt;/span&gt;
&lt;h3&gt;Always created if missing:&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;../basics/haxproj.html&quot;&gt;&lt;b&gt;default.haxproj&lt;/b&gt;&lt;/a&gt; &amp;mdash; initially near-empty file (and may well be completely empty) that will over time contain all sorts of custom project-specific definitions used in the project&apos;s content source pages, &lt;a href=&quot;../basics/tmplsnip.html&quot;&gt;templates&lt;/a&gt; or &lt;a href=&quot;../basics/tmplsnip.html#snippets&quot;&gt;snippets&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;../basics/tmplsnip.html&quot;&gt;&lt;b&gt;tmpl/default.haxtmpl.html&lt;/b&gt;&lt;/a&gt; &amp;mdash; contains the complete outer HTML scaffolding markup that every generated HTML page will embed its own unique (processed) contents into. If empty, all generated output HTML pages will be empty. Needs at least the &lt;code&gt;{P&lt;!----&gt;|:content:|&lt;!----&gt;}&lt;/code&gt; &lt;a href=&quot;../tags/p.html#Built-in&quot;&gt;haxTag&lt;/a&gt; for output pages to contain their source pages&apos; processed contents.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;../basics/bloks.html#auto&quot;&gt;&lt;b&gt;tmpl/_hax_blokindex.haxsnip.html&lt;/b&gt;&lt;/a&gt; &amp;mdash; unused in the initial/minimum/default project structure&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Only created in new and content-free projects:&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;b&gt;pages/index.html&lt;/b&gt; &amp;mdash; &lt;i&gt;only&lt;/i&gt; created &lt;i&gt;whenever&lt;/i&gt; the &lt;b&gt;pages&lt;/b&gt; directory is totally devoid of any files, as a handy example content source page to get started with.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry><entry>
        <title type="html">Bloks: sections-of-pages</title>
        <summary type="html">A collection of &lt;b&gt;related pages sharing a common path prefix&lt;/b&gt; can be associated together via the notion of the &quot;Blok&quot;: a lightweight set of a handful of shared meta-data and processing properties. &lt;span class=&quot;hd-note&quot;&gt;For example, in this site the Bloks are &lt;b&gt;Basics&lt;/b&gt;, &lt;b&gt;haXtags&lt;/b&gt; and &lt;b&gt;X-renderers&lt;/b&gt;.&lt;/span&gt;</summary>
        <link href="../basics/bloks.html"/><author><name>metaleap.github.io</name></author>
        <id>tag:metaleap.github.io,2016-12-20:haxtatic/basics/bloks.html</id>
        <updated>2016-12-20T00:00:00Z</updated>
        <content type="html">&lt;h1&gt;Bloks: sections-of-pages&lt;/h1&gt;
&lt;p class=&quot;up&quot;&gt;
	A collection of &lt;b&gt;related pages sharing a common path prefix&lt;/b&gt; can be associated together via the notion of the &quot;Blok&quot;: a lightweight set of a handful of shared meta-data and processing properties. &lt;span class=&quot;hd-note&quot;&gt;For example, in this site the Bloks are &lt;b&gt;Basics&lt;/b&gt;, &lt;b&gt;haXtags&lt;/b&gt; and &lt;b&gt;X-renderers&lt;/b&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p class=&quot;up&quot;&gt;
	Bloks are identified by a &lt;code&gt;name&lt;/code&gt; that is &lt;b&gt;exactly equivalent to the common path prefix&lt;/b&gt; of the related pages to be associated under this umbrella. This &lt;i&gt;name&lt;/i&gt; must be connected to a number of properties via a &lt;i&gt;*.haxproj&lt;/i&gt; &lt;code&gt;|B|&lt;i&gt;name&lt;/i&gt;: ..&lt;/code&gt; directive, &lt;a href=&quot;../basics/haxproj.html#bdecl&quot;&gt;as this &quot;live&quot; example (for this site&apos;s Blok named &lt;code&gt;basics&lt;/code&gt;) easily demonstrates&lt;/a&gt;.
&lt;/p&gt;
&lt;h2 id=&quot;With such a directive in place:&quot;&gt;With such a directive in place:&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;The content source pages associated with the Blok will all have a relative path pattern of &lt;i&gt;either&lt;/i&gt; &lt;code&gt;&lt;i&gt;name&lt;/i&gt;/*.html&lt;/code&gt; &lt;i&gt;or&lt;/i&gt; &lt;code&gt;&lt;i&gt;name&lt;/i&gt;.*.html&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Named &lt;a href=&quot;../tags/b.html&quot;&gt;B-tags&lt;/a&gt; (using the &lt;i&gt;name&lt;/i&gt;) will work anywhere to output any given one of that Blok&apos;s shared meta-data and processing properties (that were just defined in the above &lt;i&gt;*.haxproj&lt;/i&gt; &lt;code&gt;|B|&lt;i&gt;name&lt;/i&gt;: ..&lt;/code&gt; directive)&lt;/li&gt;
	&lt;li&gt;Unnamed &lt;a href=&quot;../tags/b.html&quot;&gt;B-tags&lt;/a&gt; (for querying the &quot;current&quot; Blok) that end up (directly or indirectly) inside Blok-associated pages will work for the same purpose&lt;/li&gt;
	&lt;li&gt;Inclusion/exclusion of the associated Blok pages in/from &lt;a href=&quot;../basics/xmlfiles.html&quot;&gt;output XML files&lt;/a&gt; (&lt;i&gt;*.atom&lt;/i&gt; and &lt;i&gt;sitemap.xml&lt;/i&gt;) is precisely specified&lt;/li&gt;
	&lt;li&gt;All of the above equally applies to the auto-generated Blok index page, if any:&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&quot;auto&quot;&gt;&lt;h2 id=&quot;Auto-generation of Blok index pages&quot;&gt;Auto-generation of Blok index pages&lt;/h2&gt;&lt;/span&gt;
&lt;p&gt;
	If the above |B| directive defines a &lt;code&gt;blokIndexPageFile&lt;/code&gt;, then 1 additional output page will be generated for the Blok that has no direct counterpart among the project&apos;s input content sources: this can be used as an umbrella page for the Blok&apos;s pages &amp;mdash; dressed as a table-of-contents, a section home, an &quot;article archive&quot;, etc. &lt;span class=&quot;hd-note&quot;&gt;Each Blok in this site has its own such auto-generated &lt;code&gt;/&amp;lt;name&amp;gt;/index.html&lt;/code&gt; as set in its corresponding |B| directive in &lt;i&gt;default.haxproj&lt;/i&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;h3&gt;Content from a snippet, not a source page&lt;/h3&gt;
&lt;p&gt;
	During generation of that page, when the &lt;a href=&quot;../basics/tmplsnip.html&quot;&gt;outer template&lt;/a&gt; invokes &lt;a href=&quot;../tags/p.html#Built-in&quot;&gt;&lt;code&gt;{P&lt;!----&gt;|:content:|&lt;!----&gt;}&lt;/code&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;the content of the &lt;code&gt;tmpl/_hax_blokindex.haxsnip.html&lt;/code&gt; &lt;a href=&quot;../basics/tmplsnip.html#snippets&quot;&gt;snippet file&lt;/a&gt; is applied in-place by&lt;/li&gt;
	&lt;li&gt;invoking an (on-the-fly in-memory) &lt;a href=&quot;../tags/x.html&quot;&gt;X-tag&lt;/a&gt; of the form &lt;code&gt;{X&lt;!----&gt;|_hax_blokindex: vars=[ (&quot;bname&quot;,&quot;&lt;i&gt;&amp;lt;blok-name&amp;gt;&lt;/i&gt;&quot;) ], content=&quot;&quot; |&lt;!----&gt;}&lt;/code&gt;.
		&lt;ul&gt;&lt;li&gt;The &quot;factory-default&quot; (auto-generated whenever missing) &lt;code&gt;tmpl/_hax_blokindex.haxsnip.html&lt;/code&gt;, as a starter template by way of example,&lt;/li&gt;
		&lt;li&gt;dynamically embeds the so-&lt;code&gt;bname&lt;/code&gt;d Blok&apos;s &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;desc&lt;/code&gt; &lt;a href=&quot;../basics/haxproj.html#bdecl&quot;&gt;properties&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;via &lt;code&gt;{B&lt;!----&gt;|title:{%&lt;i&gt;bname&lt;/i&gt;%}|&lt;!----&gt;}&lt;/code&gt; and &lt;code&gt;{B&lt;!----&gt;|desc:{%&lt;i&gt;bname&lt;/i&gt;%}|&lt;!----&gt;}&lt;/code&gt; respectively.&lt;/li&gt;&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Auto link lists to Blok pages&lt;/h3&gt;
&lt;p&gt;
	For seeing how to &lt;i&gt;actually&lt;/i&gt; generate (in this auto-generated Blok index page or elsewhere) an acceptable hyperlinked listing of some or all of the Blok-associated pages &amp;mdash;the original default &lt;code&gt;tmpl/_hax_blokindex.haxsnip.html&lt;/code&gt; lacks this&amp;mdash; it pays to inspect the project-directory from which this site was generated: specifically how a (minimally) customized &lt;code&gt;tmpl/_hax_blokindex.haxsnip.html&lt;/code&gt; invokes an additional (project-specific) &lt;code&gt;tmpl/dox-topicitem.haxsnip.html&lt;/code&gt; via a custom &lt;a href=&quot;../tags/x.html&quot;&gt;X-tag&lt;/a&gt; defined in the &lt;code&gt;|X|hax.feedView:doxtopicindex:&lt;/code&gt; directive (in &lt;a href=&quot;http://github.com/metaleap/haxtatic/blob/master/dox-demo/default.haxproj&quot;&gt;default.haxproj&lt;/a&gt;). This interplay may appear slightly confusing at first during experimentation, unless and until the (ultimately trivial) rendering logic of both the &lt;a href=&quot;../xtypes/hax.snippet.html&quot;&gt;hax.snippet&lt;/a&gt; and especially the &lt;a href=&quot;../xtypes/hax.feedView.html&quot;&gt;hax.feedView&lt;/a&gt; X-renderers are absorbed first.
&lt;/p&gt;
</content>
    </entry><entry>
        <title type="html">Page date &amp;amp; date-time formats</title>
        <summary type="html">For some projects it seems prudent to display or otherwise utilize &quot;the Page Date&quot;: moreover, specifically a custom, explicitly-set one (effectively equivalent to &quot;this is hereby decreed to have &lt;i&gt;really&lt;/i&gt; been authored/published on..&quot;) rather than one blindly parroting the OS-set &lt;i&gt;file-last-modified&lt;/i&gt; timestamp (often de-facto equivalent to &quot;this minor typo of no substantive import was belatedly fixed up quickly on..&quot;).
	&lt;!--_hax_dtformat_iso8601--&gt;</summary>
        <link href="../basics/datetime.html"/><author><name>metaleap.github.io</name></author>
        <id>tag:metaleap.github.io,2016-12-16:haxtatic/basics/datetime.html</id>
        <updated>2016-12-16T00:00:00Z</updated>
        <content type="html">&lt;h1&gt;Page date &amp;amp; date-time formats&lt;/h1&gt;
&lt;p class=&quot;up&quot;&gt;
	For some projects it seems prudent to display or otherwise utilize &quot;the Page Date&quot;: moreover, specifically a custom, explicitly-set one (effectively equivalent to &quot;this is hereby decreed to have &lt;i&gt;really&lt;/i&gt; been authored/published on..&quot;) rather than one blindly parroting the OS-set &lt;i&gt;file-last-modified&lt;/i&gt; timestamp (often de-facto equivalent to &quot;this minor typo of no substantive import was belatedly fixed up quickly on..&quot;).
	&lt;!--_hax_dtformat_iso8601--&gt;
&lt;/p&gt;
&lt;p class=&quot;up&quot;&gt;
	Page Dates are for instance output during processing by embedded &lt;code&gt;{P&lt;!----&gt;|date|&lt;!----&gt;}&lt;/code&gt; &lt;a href=&quot;../tags/p.html#Built-in&quot;&gt;P-tags&lt;/a&gt;; likewise the Page Date is accessed while &lt;a href=&quot;../basics/xmlfiles.html&quot;&gt;generating XML outputs&lt;/a&gt; or potentially (possibly sooner-than-hoped) with a custom setup of &lt;a href=&quot;../xtypes/hax.iterator.html&quot;&gt;hax.iterator&lt;/a&gt; and &lt;a href=&quot;../xtypes/hax.snippet.html&quot;&gt;hax.snippet&lt;/a&gt; X-renderers (particularly in &lt;a href=&quot;../basics/bloks.html#auto&quot;&gt;auto-generated Blok index page files&lt;/a&gt;).
&lt;/p&gt;
&lt;h2 id=&quot;Setting custom Page Dates: 2 ways&quot;&gt;Setting custom Page Dates: 2 ways&lt;/h2&gt;
&lt;h3 id=&quot;fname&quot;&gt;Option 1:  content source file name&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;Rename content source files: eg. from &lt;code&gt;page.htm&lt;/code&gt; to &lt;code&gt;&lt;i&gt;date.&lt;/i&gt;page.htm&lt;/code&gt; (&lt;i&gt;without&lt;/i&gt; repeating this change anywhere else such as hyperlink references pointing to it etc.) &amp;mdash; &lt;b&gt;IF&lt;/b&gt; this &lt;i&gt;date&lt;/i&gt; prefix is recognizable as a date-time via a &quot;well-known&quot; date-time format:&lt;/li&gt;
	&lt;ul&gt;&lt;li&gt;then the output file name will &lt;i&gt;still&lt;/i&gt; continue to be &lt;code&gt;page.htm&lt;/code&gt; (with all references to it remaining intact)&lt;/li&gt;
	&lt;li&gt;(in fact, the file will &lt;i&gt;continue&lt;/i&gt; to be identified throughout the entire processing pipeline simply as if its original source file name was still just &lt;code&gt;page.html&lt;/code&gt;, as this date detection &amp;amp; subsequent elimination occurs immediately prior to &quot;encountering&quot; the content source file during the early scanning&amp;amp;planning stage)&lt;/li&gt;
	&lt;li&gt;and the custom page date is active and will be accessible via &lt;code&gt;{P&lt;!----&gt;|date|&lt;!----&gt;}&lt;/code&gt; etc.&lt;/li&gt;&lt;/ul&gt;
	&lt;li&gt;What&apos;s a &quot;well-known&quot; date-time format here?&lt;ul&gt;&lt;li&gt;Either: simply ensure &lt;code&gt;YYYY-MM-DD&lt;/code&gt; in file name prefixes (eg. &lt;code&gt;2016-12-24.page.html&lt;/code&gt;),&lt;/li&gt;&lt;li&gt;or: if a different date-time format in file name prefixes is indeed called for, be sure to &lt;a href=&quot;../basics/haxproj.html#cdtf&quot;&gt;declare a &lt;i&gt;*.haxproj&lt;/i&gt; &lt;code&gt;|C|dtformat:&lt;/code&gt; directive defining it correctly&lt;/a&gt; under the &lt;b&gt;exact&lt;/b&gt; custom-date-time-format name &lt;code&gt;_hax_dtformat_pagefilenames&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Option 2: in-page custom P-tag&lt;/h3&gt;
&lt;p&gt;
	The Page Date can be set for any page on-the-fly during its processing by placing anywhere in its content source file a &lt;a href=&quot;../tags/p.html#Custom&quot;&gt;custom P-tag&lt;/a&gt; (aka. &quot;per-page variable&quot;) of the form &lt;code&gt;{%P&lt;!----&gt;|date=&lt;i&gt;2016-12-24&lt;/i&gt;|&lt;!----&gt;%}&lt;/code&gt; or indeed, if custom date-time formats are once again necessary for some reason, &lt;code&gt;{%P&lt;!----&gt;|date:&lt;i&gt;dtformatname&lt;/i&gt;=&lt;i&gt;date-time-here&lt;/i&gt;|&lt;!----&gt;%}&lt;/code&gt;
&lt;/p&gt;
&lt;h3&gt;Which is &quot;better&quot;?&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;Option 1 &lt;b&gt;will&lt;/b&gt; properly propagate over to &lt;code&gt;&amp;lt;lastmod&amp;gt;&lt;/code&gt; values in generated &lt;a href=&quot;../basics/xmlfiles.html&quot;&gt;sitemap.xml&lt;/a&gt; (if any), option 2 &lt;b&gt;won&apos;t&lt;/b&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;../basics/haxproj.html#cdecl&quot;&gt;Unless a full rebuild is forced&lt;/a&gt;, option 1 &lt;b&gt;possibly won&apos;t&lt;/b&gt; get &quot;picked up&quot; during processing if no other change was also made to the same content source file since the last run. (&lt;i&gt;That&apos;s because &lt;i&gt;HaXtatic&lt;/i&gt; compares file-modification timestamps for a faster incremental minimal rebuild, which the OS won&apos;t typically set just due to moving-aka.-renaming a file.&lt;/i&gt;) Option 2 &lt;b&gt;will&lt;/b&gt;.&lt;/li&gt;
	&lt;li&gt;The likelihood of a project needing to adjust individual custom Page Dates &lt;i&gt;all that frequently&lt;/i&gt; is assessed as low.&lt;/li&gt;
	&lt;li&gt;In any event, both approaches can be used in tandem and for any given file, option 2 if present will override whatever was first set via option 1, if anything.&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&quot;dtformats&quot;&gt;&lt;h2 id=&quot;Named custom date-time formats&quot;&gt;Named custom date-time formats&lt;/h2&gt;&lt;/span&gt;
&lt;p&gt;
	As already alluded to, custom date-time formats have a modicum of support in &lt;i&gt;HaXtatic&lt;/i&gt;. In fact, most-anywhere date values are accessed, a custom format can be specified. But it first needs to be &lt;b&gt;defined correctly&lt;/b&gt;, and that means &lt;a href=&quot;../basics/haxproj.html#cdtf&quot;&gt;declaring a corresponding &lt;i&gt;*.haxproj&lt;/i&gt; &lt;code&gt;|C|dtformat:&lt;/code&gt; directive&lt;/a&gt; (which in turn commands an adequate grasp of the link to &lt;i&gt;parseable date-time format-strings&lt;/i&gt; referenced right there).
&lt;/p&gt;
&lt;p&gt;
	But to &lt;b&gt;simply try out&lt;/b&gt; &lt;i&gt;utilizing&lt;/i&gt; (not &lt;i&gt;defining&lt;/i&gt;) &quot;named date-time formats&quot;, anywhere these are supported the built-in date-time format name &lt;code&gt;_hax_dtformat_iso8601&lt;/code&gt; will perform the deed the same as any custom one. To wit, embedding &lt;code&gt;{P&lt;!----&gt;|date:_hax_dtformat_iso8601|&lt;!----&gt;}&lt;/code&gt; right here, right now produces: &lt;span class=&quot;hd-note&quot;&gt;2016-12-16T00:00:00&lt;/span&gt; &amp;mdash; the conspicuous day-time a consequence of &lt;i&gt;none-whatsoever&lt;/i&gt; having been &lt;i&gt;set&lt;/i&gt; with the custom Page Date (using &lt;a href=&quot;#fname&quot;&gt;option 1&lt;/a&gt;) for this very &lt;span class=&quot;hd-note&quot;&gt;pages/basics/2016-12-16.datetime.html&lt;/span&gt;.
&lt;/p&gt;
&lt;p&gt;To output to any target format date/time values in any input format, &lt;a href=&quot;../basics/haxproj.html#xdecl&quot;&gt;set up X-tag(s)&lt;/a&gt; invoking
&lt;a href=&quot;../xtypes/hax.dtFormat.html&quot;&gt;hax.dtFormat&lt;/a&gt;&lt;/p&gt;
</content>
    </entry><entry>
        <title type="html">Templates and snippets in tmpl/</title>
        <summary type="html">When processing a content source file to generate its corresponding output file, &lt;i&gt;HaXtatic&lt;/i&gt;&apos;s first step is always determining the appropriate &lt;i&gt;tmpl/*.haxtmpl.*&lt;/i&gt; file to apply.</summary>
        <link href="../basics/tmplsnip.html"/><author><name>metaleap.github.io</name></author>
        <id>tag:metaleap.github.io,2016-12-14:haxtatic/basics/tmplsnip.html</id>
        <updated>2016-12-14T00:00:00Z</updated>
        <content type="html">&lt;h1&gt;Templates and snippets in tmpl/&lt;/h1&gt;
&lt;p class=&quot;up&quot;&gt;
	When processing a content source file to generate its corresponding output file, &lt;i&gt;HaXtatic&lt;/i&gt;&apos;s first step is always determining the appropriate &lt;i&gt;tmpl/*.haxtmpl.*&lt;/i&gt; file to apply.
&lt;/p&gt;
&lt;h2 id=&quot;Output templates: *.haxtmpl.*&quot;&gt;Output templates: *.haxtmpl.*&lt;/h2&gt;
&lt;h3&gt;For files that are deemed HTML files,&lt;/h3&gt;
&lt;p class=&quot;up&quot;&gt;
	in new projects, this will select &lt;code&gt;tmpl/&lt;i&gt;default&lt;/i&gt;.haxtmpl&lt;i&gt;.html&lt;/i&gt;&lt;/code&gt;, with the first part (here &lt;code&gt;default&lt;/code&gt;) derived from &lt;a href=&quot;../basics/namedsetups.html#Named%20setups&quot;&gt;the current setup name&lt;/a&gt; (which obviously defaults to &lt;code&gt;default&lt;/code&gt;) and &lt;code&gt;.html&lt;/code&gt; being hardcoded to always be chosen for &quot;files that are deemed HTML files&quot;.
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If &lt;code&gt;tmpl/&lt;i&gt;&amp;lt;setup-name&amp;gt;&lt;/i&gt;.haxtmpl.html&lt;/code&gt; doesn&apos;t exist, &lt;i&gt;HaXtatic&lt;/i&gt; always looks for &lt;code&gt;tmpl/default.haxtmpl.html&lt;/code&gt; next.&lt;/li&gt;
	&lt;li&gt;If &lt;i&gt;that&lt;/i&gt; doesn&apos;t exist, a pre-authored default version is re-created in that location and used.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;Which files are deemed HTML files?&lt;/b&gt; Always those with file extensions &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.htm&lt;/code&gt; and &lt;code&gt;&amp;nbsp;&lt;/code&gt; (none at all), &lt;i&gt;plus&lt;/i&gt; any custom &lt;a href=&quot;../basics/haxproj.html#cmisc&quot;&gt;_hax_htmlequivexts&lt;/a&gt; explicitly listed in a currently loaded &lt;i&gt;*.haxproj&lt;/i&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What about files &lt;i&gt;not&lt;/i&gt; &quot;deemed HTML&quot;?&lt;/h3&gt;
&lt;p&gt;
	For those &lt;i&gt;HaXtatic&lt;/i&gt; will select &lt;code&gt;tmpl/&lt;i&gt;&amp;lt;setup-name&amp;gt;&lt;/i&gt;.haxtmpl&lt;i&gt;.&amp;lt;ext&amp;gt;&lt;/i&gt;&lt;/code&gt; with &lt;code&gt;&amp;nbsp;.&amp;lt;ext&amp;gt;&lt;/code&gt; being the actual file extension of the current input file. So one may author various file-type-specific templates such as &lt;code&gt;tmpl/&lt;i&gt;&amp;lt;setup-name&amp;gt;&lt;/i&gt;.haxtmpl&lt;i&gt;.js&lt;/i&gt;&lt;/code&gt;, &lt;code&gt;tmpl/&lt;i&gt;&amp;lt;setup-name&amp;gt;&lt;/i&gt;.haxtmpl&lt;i&gt;.css&lt;/i&gt;&lt;/code&gt; &lt;code&gt;tmpl/&lt;i&gt;&amp;lt;setup-name&amp;gt;&lt;/i&gt;.haxtmpl&lt;i&gt;.xml&lt;/i&gt;&lt;/code&gt; and so forth.
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If &lt;code&gt;tmpl/&lt;i&gt;&amp;lt;setup-name&amp;gt;&lt;/i&gt;.haxtmpl&lt;i&gt;.&amp;lt;ext&amp;gt;&lt;/i&gt;&lt;/code&gt; doesn&apos;t exist, &lt;i&gt;HaXtatic&lt;/i&gt; always looks for &lt;code&gt;tmpl/default.haxtmpl&lt;i&gt;.&amp;lt;ext&amp;gt;&lt;/i&gt;&lt;/code&gt; next.&lt;/li&gt;
	&lt;li&gt;If &lt;i&gt;that&lt;/i&gt; doesn&apos;t exist, &lt;i&gt;HaXtatic&lt;/i&gt; assumes in memory a default &quot;template&quot; with an entire content of just &lt;code&gt;{P&lt;!----&gt;|:content:|&lt;!----&gt;}&lt;/code&gt;, equivalent to a &quot;template&quot; that really adds nothing but simply refers directly to the current content source being processed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Authoring *.haxtmpl.* files&quot;&gt;Authoring *.haxtmpl.* files&lt;/h2&gt;
&lt;p&gt;
	These templates may contain whatever content is desired. For each processed input file, the corresponding generated output file will &lt;b&gt;first and foremost contain exactly the template content&lt;/b&gt;, with every &lt;a href=&quot;../tags/index.html&quot;&gt;haXtag&lt;/a&gt; occurrence substituted in-place for its own dynamically rendered output. In this process, wherever the &lt;a href=&quot;../tags/p.html#Built-in&quot;&gt;&lt;code&gt;{P&lt;!----&gt;|:content:|&lt;!----&gt;}&lt;/code&gt; haXtag&lt;/a&gt; is encountered in the template content, it is substituted in-place for (finally) the current input file&apos;s &lt;i&gt;actual&lt;/i&gt; original source content &amp;mdash; again with each &lt;a href=&quot;../tags/index.html&quot;&gt;haXtag&lt;/a&gt; substituted likewise.
&lt;/p&gt;
&lt;span id=&quot;snippets&quot;&gt;&lt;h2 id=&quot;Output snippets: *.haxsnip.html&quot;&gt;Output snippets: *.haxsnip.html&lt;/h2&gt;&lt;/span&gt;
&lt;p&gt;These provide similar functionality to what is elsewhere variously called &lt;b&gt;&quot;controls&quot;, &quot;components&quot;, &quot;sub-templates&quot;&lt;/b&gt;, or &quot;&lt;i&gt;somesuch&lt;/i&gt;lets&quot; &amp;mdash; that is the repeat reuse predefined blocks of content/markup in a parameterized manner, ie. with them including named, variable values passed to them from the call-site.&lt;/p&gt;
&lt;h3&gt;For example,&lt;/h3&gt;
&lt;p&gt;the created-by-default &lt;code&gt;tmpl/_hax_blokindex.haxsnip.html&lt;/code&gt; illustrates the simplicity of &lt;i&gt;HaXtatic&lt;/i&gt;&apos;s implementation of this powerful concept:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Variable values that are declared in the &lt;code&gt;vars=[]&lt;/code&gt; list at the top (each allowing a default value if the caller does not supply a dynamic one to use) are&lt;/li&gt;
	&lt;li&gt;then, at processing time (of an &lt;a href=&quot;../tags/x.html&quot;&gt;X-tag&lt;/a&gt; anywhere that&apos;s invoking this snippet), replacing any references to themselves inside &lt;code&gt;content=&amp;gt;&lt;/code&gt; that are enclosed within &lt;code&gt;{%&lt;/code&gt; and &lt;code&gt;%}&lt;/code&gt;.
&lt;/ul&gt;
&lt;h3&gt;Directives first, then *.haxsnip.html files&lt;/h3&gt;
&lt;p&gt;These &lt;code&gt;tmpl/*.haxsnip.html&lt;/code&gt; files are really no different from bog-standard &lt;code&gt;|X|hax.snippet:&lt;i&gt;&amp;lt;some-name&amp;gt;&lt;/i&gt;:&lt;/code&gt; &lt;a href=&quot;../basics/haxproj.html#xdecl&quot;&gt;directives in a &lt;i&gt;*.haxproj&lt;/i&gt;&lt;/a&gt;, so best to start &lt;a href=&quot;../xtypes/hax.snippet.html&quot;&gt;with those&lt;/a&gt; at first (and delaying out-&quot;sourcing&quot; them to individual &lt;code&gt;tmpl/*.haxsnip.html&lt;/code&gt; files) until correct results are achieved with ease.&lt;/p&gt;
&lt;p&gt;In fact, this is how all the &lt;code&gt;tmpl/*.haxsnip.html&lt;/code&gt; files are loaded: exactly right after loading the current &lt;a href=&quot;../basics/haxproj.html&quot;&gt;*.haxproj&lt;/a&gt; files during start-up, with every such &lt;code&gt;tmpl/&lt;i&gt;some-name&lt;/i&gt;.haxsnip.html&lt;/code&gt; being appended (in memory, on-the-fly, to the entire combined loaded &lt;i&gt;*.haxproj&lt;/i&gt; source) as one individual &lt;code&gt;|X|hax.snippet:&lt;i&gt;some-name&lt;/i&gt;:&lt;/code&gt; directive.&lt;/p&gt;
&lt;p&gt;So the support for separate &lt;code&gt;tmpl/*.haxsnip.html&lt;/code&gt; files is really just icing on the &lt;code&gt;|X|hax.snippet:&lt;i&gt;my-component&lt;/i&gt;:&lt;/code&gt; &lt;a href=&quot;../xtypes/hax.snippet.html&quot;&gt;cake&lt;/a&gt;.&lt;/p&gt;
</content>
    </entry><entry>
        <title type="html">Project setup: *.haxproj files</title>
        <summary type="html">A near-empty &lt;code&gt;default.haxproj&lt;/code&gt; was &lt;a href=&quot;../basics/projdir.html#files&quot;&gt;created&lt;/a&gt; during project creation. This plain-text file exists to contain any number of (fairly trivial) &quot;directives&quot; &amp;mdash; lean-yet-expressive statements that may: define reusable micro-contents, fine-tune the overall processing flow, associate certain content pages with one another, or compose and direct custom rendering logic.</summary>
        <link href="../basics/haxproj.html"/><author><name>metaleap.github.io</name></author>
        <id>tag:metaleap.github.io,2016-12-10:haxtatic/basics/haxproj.html</id>
        <updated>2016-12-10T00:00:00Z</updated>
        <content type="html">&lt;h1&gt;Project setup: *.haxproj files&lt;/h1&gt;
&lt;p class=&quot;up&quot;&gt;
	A near-empty &lt;code&gt;default.haxproj&lt;/code&gt; was &lt;a href=&quot;../basics/projdir.html#files&quot;&gt;created&lt;/a&gt; during project creation. This plain-text file exists to contain any number of (fairly trivial) &quot;directives&quot; &amp;mdash; lean-yet-expressive statements that may: define reusable micro-contents, fine-tune the overall processing flow, associate certain content pages with one another, or compose and direct custom rendering logic.
&lt;/p&gt;
&lt;p class=&quot;up hd-note&quot;&gt;
	(Note that &lt;a href=&quot;../basics/namedsetups.html&quot;&gt;you can combine multiple &lt;i&gt;*.haxproj&lt;/i&gt; files&lt;/a&gt; &amp;mdash; eg. if they grow too big to grasp at once, or for more advanced purposes such as temporary overriding of some directives or separately co-existing &quot;named setups&quot; in a single project.)
&lt;/p&gt;
&lt;h2 id=&quot;Directives&quot;&gt;Directives&lt;/h2&gt;
&lt;p class=&quot;up&quot;&gt;
	Here&apos;s what they look like:
	&lt;pre&gt;
|T|&lt;i&gt;greeting&lt;/i&gt;: &lt;i&gt;Hello stranger!&lt;/i&gt;
|C|_hax_domainname: &lt;i&gt;www.haxtatic.foo&lt;/i&gt;
	&lt;/pre&gt;
	&lt;br /&gt;Simples. A &quot;directive&quot; begins with a line starting precisely with one of &lt;code&gt;|T|&lt;/code&gt;, &lt;code&gt;|B|&lt;/code&gt;, &lt;code&gt;|X|&lt;/code&gt;, &lt;code&gt;|P|&lt;/code&gt;, or &lt;code&gt;|C|&lt;/code&gt;, and spans all subsequent lines &lt;i&gt;until&lt;/i&gt; the one that begins the next directive. Best practice (for readability and avoiding subtle pitfalls) is to &lt;i&gt;indent&lt;/i&gt; all subsequent lines &quot;belonging&quot; to each directive, but this isn&apos;t strictly required. Everything before the first directive is ignored, everything after necessarily belongs to some directive or other.
&lt;/p&gt;
&lt;h3&gt;Specifying local paths&lt;/h3&gt;
&lt;p&gt;
	Directives of type |B| and |C| allow specifying of local paths. These are typically considered relative to the project&apos;s build directory and in any event, nowhere are paths pointing outside the project directory &lt;b&gt;supported&lt;/b&gt;. &lt;i&gt;HaXtatic&lt;/i&gt; does attempt to sanitize those and then interpret them as relative to the currently supposed context.
&lt;/p&gt;
&lt;span id=&quot;tdecl&quot;&gt;&lt;h2 id=&quot;|T| directives: for text values&quot;&gt;|T| directives: for text values&lt;/h2&gt;&lt;/span&gt;
&lt;ul&gt;
	&lt;li&gt;Define named plain-text/simple-markup snippets like so:&lt;br/&gt;&lt;code&gt;|T|&lt;i&gt;AuthBlurb&lt;/i&gt;:&lt;i&gt; The author is a serial enthusiast&lt;br/&gt;role-playing &amp;lt;a&amp;gt;on XingedIn&amp;lt;/a&amp;gt;.&lt;/i&gt;&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Embed as &lt;a href=&quot;../tags/t.html&quot;&gt;T-tags&lt;/a&gt; anywhere: &lt;code&gt;{T&lt;!----&gt;|&lt;i&gt;AuthBlurb&lt;/i&gt;|&lt;!----&gt;}&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Leading/trailing white-space is stripped of both the &lt;i&gt;name&lt;/i&gt; and the &lt;i&gt;value&lt;/i&gt;, which as shown are separated by the first colon encountered.&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&quot;bdecl&quot;&gt;&lt;h2 id=&quot;|B| directives: for &amp;quot;Bloks&amp;quot;&quot;&gt;|B| directives: for &amp;quot;Bloks&amp;quot;&lt;/h2&gt;&lt;/span&gt;
&lt;p&gt;
	Just as &lt;a href=&quot;#tdecl&quot;&gt;|T| directives&lt;/a&gt; consist of a &lt;i&gt;name&lt;/i&gt; connected via a &lt;code&gt;&amp;nbsp;:&lt;/code&gt; to their &lt;i&gt;value&lt;/i&gt;, so each and every &lt;b&gt;|B| directive&lt;/b&gt; defines a &lt;a href=&quot;../basics/bloks.html&quot;&gt;Blok&lt;/a&gt; &lt;span class=&quot;hd-note&quot;&gt;(a section-of-related-pages, or indeed a simple &quot;poor-man&apos;s blog-of-sorts&quot;)&lt;/span&gt; by connecting via a &lt;code&gt;&amp;nbsp;:&lt;/code&gt; that Blok&apos;s &lt;i&gt;name&lt;/i&gt; to its properties &amp;mdash; eg. here&apos;s how this site&apos;s current &lt;a href=&quot;../basics/index.html&quot;&gt;Basics&lt;/a&gt; section (also just a &quot;Blok&quot;) is (approximately, &lt;a href=&quot;http://github.com/metaleap/haxtatic/blob/master/dox-demo/default.haxproj#L18&quot;&gt;the original&lt;/a&gt; includes &lt;a href=&quot;../tags/index.html&quot;&gt;haXtags&lt;/a&gt;) defined:
&lt;/p&gt;
&lt;pre&gt;
|B|&lt;i&gt;basics&lt;/i&gt;:
    title=&quot;&lt;i&gt;Basics&lt;/i&gt;&quot;,
    atomFile = &quot;&lt;i&gt;-xml/basics.atom&lt;/i&gt;&quot;,
    blokIndexPageFile=&quot;&lt;i&gt;basics/index.html&lt;/i&gt;&quot;,
    inSitemap = &lt;i&gt;True&lt;/i&gt;,
    desc=&amp;gt;
       &lt;i&gt;&amp;lt;p&amp;gt;This material may appear &amp;quot;unduly exhaustive&amp;quot; at
	first glance, but this is all blatantly-simple-stuff
	and mostly just spelled out in (almost) every last
	minor detail for completeness and future reference.&amp;lt;/p&amp;gt;
	&amp;lt;p&amp;gt;Notably no article on &amp;lt;b&amp;gt;&amp;quot;how to author pages&amp;quot;&amp;lt;/b&amp;gt;.
	That&amp;apos;s because there&amp;apos;s nothing to it once a quick note
	is made of &amp;lt;a href=&amp;quot;../basics/projdir.html&amp;quot;&amp;gt;where to place them&amp;lt;/a&amp;gt;,
	&amp;lt;a href=&amp;quot;../basics/tmplsnip.html&amp;quot;&amp;gt;which outer-template is applied during processing &amp;amp;amp; how&amp;lt;/a&amp;gt;,
	as well as the diverse range of &amp;lt;a href=&amp;quot;../tags/index.html&amp;quot;&amp;gt;haXtags&amp;lt;/a&amp;gt;
	that any page (indeed any user-authored/-customized file
	in a project) may embed and combine in any manner.&amp;lt;/p&amp;gt;&lt;/i&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;../basics/syntax.html&quot;&gt;Stringent syntactic rules&lt;/a&gt; apply here! The properties in detail:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;title&lt;/code&gt; and &lt;code&gt;desc&lt;/code&gt; &amp;mdash; self-explanatory, and used (for one) in these associated &lt;a href=&quot;../basics/bloks.html&quot;&gt;auto-generated
	files&lt;/a&gt;, if any:&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;atomFile&lt;/code&gt; and &lt;code&gt;blokIndexPageFile&lt;/code&gt; both describe a site-root-relative (aka. &lt;i&gt;build&lt;/i&gt;-directory-relative) file path and if empty, these files will not be generated.&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;inSitemap&lt;/code&gt; includes or excludes &lt;i&gt;all&lt;/i&gt; pages associated with this Blok in/from the generated &lt;a href=&quot;../basics/xmlfiles.html&quot;&gt;sitemap.xml&lt;/a&gt; (if any)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;hd-note&quot;&gt;The values set for the above properties can be output anywhere via &lt;a href=&quot;../tags/b.html&quot;&gt;B-tags&lt;/a&gt; &amp;mdash; so in essence each &lt;b&gt;|B|&lt;/b&gt; directive automatically defines 5 uniquely distinct B-tags.&lt;/p&gt;
&lt;span id=&quot;xdecl&quot;&gt;&lt;h2 id=&quot;|X| directives: for rendering&quot;&gt;|X| directives: for rendering&lt;/h2&gt;&lt;/span&gt;
&lt;p&gt;
	Just as each &lt;a href=&quot;#tdecl&quot;&gt;|T| directive&lt;/a&gt; practically defines a uniquely distinct &lt;a href=&quot;../tags/t.html&quot;&gt;T-tag&lt;/a&gt; that can be embedded many times anywhere (to effect in-place text substitution), so each and every &lt;b&gt;|X| directive&lt;/b&gt; in essence defines a uniquely distinct &lt;a href=&quot;../tags/x.html&quot;&gt;X-tag&lt;/a&gt; that can be embedded many times anywhere (to effect in-place output rendering by some custom logic).
&lt;/p&gt;
&lt;p&gt;
	That is to say: with &lt;code&gt;|X|&lt;i&gt;x-renderer-type&lt;/i&gt;:&lt;i&gt;mytagname&lt;/i&gt;: ..&lt;/code&gt; we declare that &lt;code&gt;{X&lt;!----&gt;|mytagname: ..|&lt;!----&gt;}&lt;/code&gt; encountered &lt;i&gt;anywhere&lt;/i&gt; will during processing invoke the &lt;a href=&quot;../xtypes/index.html&quot;&gt;X-renderer&lt;/a&gt; &lt;i&gt;x-renderer-type&lt;/i&gt; with the defined properties in effect.
&lt;/p&gt;
&lt;p&gt;
	So every |X| directive associates with a chosen custom (X-)tag name: &lt;i&gt;both&lt;/i&gt; a specified &lt;a href=&quot;../xtypes/index.html&quot;&gt;X-renderer&lt;/a&gt; type to invoke for output rendering (in-place of every X-tag encountered with that given name), &lt;i&gt;and&lt;/i&gt; that X-renderer&apos;s properties effective while it produces output.
&lt;/p&gt;
&lt;p&gt;
	For example, this site declares (among others) these two &lt;b&gt;|X|&lt;/b&gt; directives in order to automatically generate on every page (the shaded box near the top to the right) a listing of &quot;Jump To&quot; shortcuts for every chapter heading on that page:
&lt;/p&gt;
&lt;pre&gt;
|X|hax.miniTag:&lt;i&gt;h&lt;/i&gt;:&lt;i&gt;h2&lt;/i&gt;:
    attr=&lt;i&gt;[(&quot;id&quot;,&quot;{:content:}&quot;)]&lt;/i&gt;

|X|hax.htmlAnchors:&lt;i&gt;doxpagetoc&lt;/i&gt;:&lt;i&gt;h2&lt;/i&gt;:
    considerEmpty = &lt;i&gt;1&lt;/i&gt;,
    outputIfEmpty = &lt;i&gt;&quot;&amp;lt;style type=&apos;text/css&apos;&amp;gt;.hd-toc { display: none; }&amp;lt;/style&amp;gt;&quot;&lt;/i&gt;,
    xmlEscapeHref = False
&lt;/pre&gt;
&lt;p&gt;
	No particularly &lt;i&gt;substantial&lt;/i&gt; extra effort here for all the individual content pages: these simply contain their chapter headings not as plain &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; HTML tags but as &lt;code&gt;{X&lt;!----&gt;|h: Chapter Heading Here|&lt;!----&gt;}&lt;/code&gt; X-tags instead (2 quick &quot;find&amp;amp;replace-in-folders&quot; commands in any minimally capable text editor if this change is introduced late). Meanwhile just the &lt;a href=&quot;../basics/tmplsnip.html&quot;&gt;default.haxtmpl.html&lt;/a&gt; employs a single &lt;code&gt;{X&lt;!----&gt;|doxpagetoc:li: attr = [] |&lt;!----&gt;}&lt;/code&gt; X-tag to dynamically produce these desired, page-content-specific &lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#...&lt;/code&gt; outputs in all generated pages.
&lt;/p&gt;
&lt;h3&gt;To recapitulate&lt;/h3&gt;
&lt;p&gt;what becomes immediately apparent from just this example:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Specify first the X-renderer type (here &lt;code&gt;hax.miniTag&lt;/code&gt; and &lt;code&gt;hax.htmlAnchors&lt;/code&gt;)&lt;/li&gt;
	&lt;li&gt;followed by a &lt;code&gt;&amp;nbsp;:&lt;/code&gt; and a &lt;i&gt;custom (X-)tag name&lt;/i&gt; (here &lt;code&gt;&amp;nbsp;h&lt;/code&gt; and &lt;code&gt;doxpagetoc&lt;/code&gt;) and another &lt;code&gt;&amp;nbsp;:&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;followed by some individually-varying X-renderer-specific settings notation (aka. tag config) that each X-renderer defines and &lt;a href=&quot;../xtypes/index.html&quot;&gt;documents&lt;/a&gt; separately.&lt;/li&gt;
	&lt;li&gt;In turn, usage of any &lt;code&gt;{X&lt;!----&gt;|&lt;/code&gt; tag embedded anywhere begins with the very &lt;i&gt;custom tag name&lt;/i&gt; from 2. (again, here &lt;code&gt;&amp;nbsp;h&lt;/code&gt; and &lt;code&gt;doxpagetoc&lt;/code&gt;) pointing to the associated |X| directive, followed by a &lt;code&gt;&amp;nbsp;:&lt;/code&gt; and then possibly some further individually-varying X-renderer-specific per-instance settings notation (aka. tag params), if any.&lt;/li&gt;
	&lt;li&gt;For the built-in X-renderers, both the per-tag settings (aka. tag config) and per-instantiation settings (aka. tag params) notation is (either one or the other but) usually a combination of:&lt;ul&gt;&lt;li&gt;first, 1 or 2 colon-separated &quot;flags&quot; (such as &lt;code&gt;:h2:&lt;/code&gt; and &lt;code&gt;:li:&lt;/code&gt; above) and&lt;/li&gt;&lt;li&gt;next, a block of the &lt;a href=&quot;#bdecl&quot;&gt;already familiar&lt;/a&gt; &lt;code&gt;name=&lt;i&gt;value&lt;/i&gt;, ..&lt;/code&gt; &lt;i&gt;named properties&lt;/i&gt;, to which &lt;a href=&quot;../basics/syntax.html&quot;&gt;these stringent syntactic rules&lt;/a&gt; strictly apply.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&quot;pdecl&quot;&gt;&lt;h2 id=&quot;|P| directives: for &amp;quot;postings&amp;quot;&quot;&gt;|P| directives: for &amp;quot;postings&amp;quot;&lt;/h2&gt;&lt;/span&gt;
&lt;p&gt;
	Create &quot;micro-content records&quot; with &lt;b&gt;|P|&lt;/b&gt; directives. All such &quot;posts&quot; are categorized first into &quot;feed names&quot; (or think arbitrary &quot;primary category&quot;, really) and a further sub-level of &lt;nobr&gt;&quot;cat&quot;(egory)&lt;/nobr&gt;. The general format is as the following 2 examples illustrate:
&lt;/p&gt;
&lt;pre&gt;
|P|&lt;i&gt;quotes&lt;/i&gt;:
    dt = &quot;&lt;i&gt;2016-01-23&lt;/i&gt;&quot;,
    cat=&quot;&lt;i&gt;Programming&lt;/i&gt;&quot;,
    title=&quot;&lt;i&gt;Brian Beckman&lt;/i&gt;&quot;,
    link=&quot;&lt;i&gt;http://youtu.be/ZhuHCtR3xq8?t=1003&lt;/i&gt;&quot;,
    more=[],
    content=&amp;gt;
    &lt;i&gt;As software gets ever more complicated, we need better control over the complexity. [...]
    &amp;lt;i&amp;gt;The&amp;lt;/i&amp;gt; way to control complexity is compositionality.&lt;/i&gt;

|P|&lt;i&gt;quotes&lt;/i&gt;:
    dt = &quot;&lt;i&gt;2016-03-21&lt;/i&gt;&quot;,
    cat=&quot;&lt;i&gt;Programming&lt;/i&gt;&quot;,
    title=&quot;&lt;i&gt;John Carmack&lt;/i&gt;&quot;,
    link=&quot;&lt;i&gt;http://number-none.com/blow/john_carmack_on_inlined_code.html&lt;/i&gt;&quot;,
    more=[	(&quot;customfield1&quot;,&quot;data value 1&quot;),
    		(&quot;customfield2&quot;,&quot;dat data value 2&quot;),
    		(&quot;customfieldX&quot;,&quot;funky dis&quot;) ],
    content=&amp;gt;
    &lt;i&gt;I have gotten much more bullish about pure functional programming.&lt;/i&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;../basics/syntax.html&quot;&gt;Stringent syntactic rules&lt;/a&gt; apply here! The property names should be self-explanatory, except &lt;code&gt;more&lt;/code&gt; (normally not needed and then best kept &lt;code&gt;&amp;nbsp;[]&lt;/code&gt; empty &amp;mdash; when such custom &quot;record data&quot; fields become a serious consideration, check out the &lt;i&gt;default.haxproj&lt;/i&gt; for this very site for usage). The above example constitutes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1 &quot;feed&quot; (aka. arbitrary primary category) named &lt;code&gt;quotes&lt;/code&gt;&lt;/li&gt;&lt;li&gt;made up of 2 &quot;posts&quot; (aka. micro-content records),&lt;/li&gt;&lt;li&gt;both in the &lt;nobr&gt;&quot;cat&quot;(egory)&lt;/nobr&gt; of &lt;code&gt;Programming&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;
	Such &quot;feeds&quot; can be output as &lt;i&gt;*.atom&lt;/i&gt; XML files (just add a &lt;a href=&quot;#cmisc&quot;&gt;|C|_hax_relpath_postatoms&lt;/a&gt; directive) but other than that no separate pages or other files will be auto-generated from them. To embed such micro-contents in the project&apos;s generated output pages in versatile ways (&lt;i&gt;without&lt;/i&gt; coding up a custom X-renderer from scratch), use the &quot;feed&quot;-related iterators of the built-in &lt;a href=&quot;../xtypes/hax.iterator.html&quot;&gt;hax.iterator&lt;/a&gt; X-renderer (those, incidentally, treat |P| &quot;feeds&quot; and Bloks as (for their purposes) functionally equivalent types of content sources, allowing for some neat mixing-and-mashing).
&lt;/p&gt;
&lt;span id=&quot;cdecl&quot;&gt;&lt;h2 id=&quot;|C| directives: more control&quot;&gt;|C| directives: more control&lt;/h2&gt;&lt;/span&gt;
&lt;p&gt;
	All quite unnecessary at first, and only promising some relief for increasingly extensive projects on the verge of becoming unwieldy.
&lt;/p&gt;
&lt;h3&gt;|C|process:ing of source directories&lt;/h3&gt;
&lt;p&gt;For processing source directories, 2 directives are parsed if present: &lt;code&gt;|C|process:static:&lt;/code&gt; (raw files to be batch-copied unprocessed) and &lt;code&gt;|C|process:pages:&lt;/code&gt; (dynamically processed files to be templated-and-generated). Examples:&lt;/p&gt;
&lt;pre&gt;
|C|process:static:
    skip=[&lt;i&gt;&quot;*_thumb.jpg&quot;&lt;/i&gt;], force=[],
    dirs=[&lt;i&gt;&quot;static1&quot;,&quot;static2&quot;,&quot;static3&quot;&lt;/i&gt;]

|C|process:pages:
    skip=[], force=[&lt;i&gt;&quot;*&quot;&lt;/i&gt;], dirs=[]
&lt;/pre&gt;
&lt;p&gt;Implicit factory defaults:&lt;/p&gt;
&lt;pre&gt;
|C|process:static:
    skip=[], force=[],
    dirs=[&lt;i&gt;&quot;static&quot;&lt;/i&gt;]

|C|process:pages:
    skip=[], force=[],
    dirs=[&lt;i&gt;&quot;pages&quot;&lt;/i&gt;]
&lt;/pre&gt;
&lt;p&gt;For any such &lt;code&gt;|C|process:&lt;/code&gt; directive:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;../basics/syntax.html&quot;&gt;Stringent syntactic rules&lt;/a&gt; apply here.&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;dirs&lt;/code&gt; to specify the list of &lt;i&gt;names&lt;/i&gt; (not patterns or paths) of all direct sub-directories (situated inside the project directory) to source contents from. If empty &lt;code&gt;&amp;nbsp;[]&lt;/code&gt;, defaults to &lt;i&gt;pages&lt;/i&gt; for &lt;code&gt;|C|process:pages:&lt;/code&gt; and to &lt;i&gt;static&lt;/i&gt; for &lt;code&gt;|C|process:static:&lt;/code&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;skip&lt;/code&gt; to specify a list of &quot;simpleton file name (not path) patterns&quot; designating which files to &lt;b&gt;always-skip&lt;/b&gt; during processing, regardless of current file modification timestamps. &lt;span class=&quot;hd-note&quot;&gt;(A &quot;simpleton&quot; pattern either begins with, or ends with, or both, or is devoid of, or consists entirely of an &lt;code&gt;&amp;nbsp;*&lt;/code&gt; and interprets no other wildcards or wildcard placements.)&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;force&lt;/code&gt; to specify a list of &quot;simpleton file name (not path) patterns&quot; designating which files to &lt;b&gt;always force&lt;/b&gt; processing for, regardless of current file modification timestamps.&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;skip = [&quot;*&quot;]&lt;/code&gt; force-skips all &lt;i&gt;except&lt;/i&gt; what&apos;s forced by &lt;code&gt;force&lt;/code&gt;. If the &lt;code&gt;skip = [ .. ]&lt;/code&gt; list contains a single &lt;code&gt;&quot;*&quot;&lt;/code&gt; among other values, this is interpreted as simply &lt;code&gt;skip = [&quot;*&quot;]&lt;/code&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;force = [&quot;*&quot;]&lt;/code&gt; force-processes all &lt;i&gt;except&lt;/i&gt; what&apos;s excluded by &lt;code&gt;skip&lt;/code&gt;. If the &lt;code&gt;force = [ .. ]&lt;/code&gt; list contains a single &lt;code&gt;&quot;*&quot;&lt;/code&gt; among other values, this is interpreted as simply &lt;code&gt;force = [&quot;*&quot;]&lt;/code&gt;.&lt;/li&gt;
	&lt;li&gt;If both &lt;code&gt;skip = [&quot;*&quot;]&lt;/code&gt; &lt;i&gt;and&lt;/i&gt; &lt;code&gt;force = [&quot;*&quot;]&lt;/code&gt; end up as effectively present in the same directive, both cancel each other and the default combination &lt;code&gt;skip=[], force=[]&lt;/code&gt; is thusly assumed for both.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cdtf&quot;&gt;|C|dtformat:&lt;/h3&gt;
&lt;p&gt;Defines a custom &lt;a href=&quot;../basics/datetime.html#dtformats&quot;&gt;date-time format&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;
|C|dtformat:&lt;i&gt;slang&lt;/i&gt;:
    &lt;i&gt;Way back on &lt;/i&gt;%Y-%m-%d&lt;i&gt; it was!&lt;/i&gt;
&lt;/pre&gt;
&lt;p&gt;
Format strings are parsed &lt;a href=&quot;http://downloads.haskell.org/ghc/8.0.2/docs/html/libraries/time-1.6.0.1/Data-Time-Format.html#v:formatTime&quot;&gt;as documented here&lt;/a&gt;.
&lt;/p&gt;
&lt;h3 id=&quot;cmisc&quot;&gt;|C| .. (miscellaneous)&lt;/h3&gt;
&lt;p&gt;Choose by example what might be needed from:&lt;/p&gt;
&lt;pre&gt;
|C|_hax_domainname: &lt;i&gt;www.haxtatic.foo&lt;/i&gt;
|C|_hax_dir_build: &lt;i&gt;g&amp;eacute;n&amp;eacute;r&amp;eacute;&lt;/i&gt;
|C|_hax_dir_deploy: &lt;i&gt;redistribuer&lt;/i&gt;
|C|_hax_dir_cache: &lt;i&gt;&lt;/i&gt;
|C|_hax_relpath_postatoms: &lt;i&gt;xml/posts/&lt;/i&gt;
|C|_hax_relpath_sitemap: &lt;i&gt;xml/sitemap.xml&lt;/i&gt;
|C|_hax_htmlequivexts: &lt;i&gt;php,shtml,xhtml&lt;/i&gt;
|C|_hax_onparseerror: &lt;i&gt;abort&lt;/i&gt;
|C|process:tags: &lt;i&gt;T,P,C&lt;/i&gt;
&lt;/pre&gt;
&lt;p&gt;Implicit factory defaults are:&lt;/p&gt;
&lt;pre&gt;
|C|_hax_domainname: &lt;i&gt;&amp;lt;name-of-project-directory&amp;gt;&lt;/i&gt;
|C|_hax_dir_build: &lt;i&gt;build&lt;/i&gt;
|C|_hax_dir_deploy: &lt;i&gt;&lt;/i&gt;
|C|_hax_dir_cache: &lt;i&gt;_cache_tmp&lt;/i&gt;
|C|_hax_relpath_postatoms: &lt;i&gt;&lt;/i&gt;
|C|_hax_relpath_sitemap: &lt;i&gt;sitemap.xml&lt;/i&gt;
|C|_hax_htmlequivexts: &lt;i&gt;&lt;/i&gt;
|C|_hax_onparseerror: &lt;i&gt;&lt;/i&gt;
|C|process:tags: &lt;i&gt;T,P,B,X&lt;/i&gt;
&lt;/pre&gt;
&lt;p&gt;To elaborate:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;_hax_domainname&lt;/code&gt; is used in &lt;a href=&quot;../basics/xmlfiles.html&quot;&gt;sitemap.xml&lt;/a&gt; and all generated &lt;a href=&quot;../basics/xmlfiles.html#blokatoms&quot;&gt;*.atom XML&lt;/a&gt; feed files&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;_hax_relpath_sitemap&lt;/code&gt; &amp;mdash; site-root-relative &lt;i&gt;file path&lt;/i&gt; to the output &lt;a href=&quot;../basics/xmlfiles.html&quot;&gt;sitemap.xml&lt;/a&gt;, set to &lt;code&gt;&amp;nbsp;&lt;/code&gt; (no value) to disable generating the sitemap.&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;_hax_relpath_postatoms&lt;/code&gt; &amp;mdash; generation of &lt;a href=&quot;../basics/xmlfiles.html#blokatoms&quot;&gt;*.atom XML&lt;/a&gt; files for |P| feeds can be enabled by setting this directive with a site-root-relative (aka build-output-directory-relative) &lt;i&gt;directory path&lt;/i&gt; to store them in; by default, such files are not generated&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;_hax_htmlequivexts&lt;/code&gt; &amp;mdash; file extensions &lt;i&gt;other&lt;/i&gt; than the built-in always-on &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.htm&lt;/code&gt; and &lt;code&gt;&amp;nbsp;&lt;/code&gt; (no file extension) can be designated to also be processed via the applicable &lt;a href=&quot;../basics/tmplsnip.html&quot;&gt;*.haxtmpl&lt;i&gt;.html&lt;/i&gt;&lt;/a&gt; template&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;_hax_onparseerror&lt;/code&gt; &amp;mdash; if manually set to &lt;code&gt;&lt;i&gt;abort&lt;/i&gt;&lt;/code&gt;, all processing will halt upon the first
	&lt;a href=&quot;../basics/syntax.html&quot;&gt;failure to parse&lt;/a&gt; some directive properties or &lt;a href=&quot;../tags/x.html&quot;&gt;X-tag&lt;/a&gt; parameters. By default, parse errors result in the
	process continuing but the error details being written out directly in-place into generated output files.&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;process:tags:&lt;/code&gt; &amp;mdash; comma-separated list of &lt;a href=&quot;../tags/index.html&quot;&gt;haXtags&lt;/a&gt; to be processed. Removing those that will never be embedded anywhere in the project output may &lt;i&gt;marginally&lt;/i&gt; speed up processing (perhaps only noticably-so with many 1000s of processable input files). Also allows enabling the disabled-by-default &lt;code&gt;{C&lt;!----&gt;|&lt;i&gt;misc_setting_name&lt;/i&gt;|&lt;!----&gt;}&lt;/code&gt; C-tag prefix, which simply outputs the
	current setting of any (except &lt;code&gt;|C|process:..&lt;/code&gt; &amp;amp; &lt;code&gt;|C|dtformat:..&lt;/code&gt;) named configuration directive. &lt;b&gt;Note:&lt;/b&gt;
	use of haXtags in &lt;i&gt;this one&lt;/i&gt; directive is (other than plain puzzling) probably ill-advised&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;_hax_dir_deploy&lt;/code&gt; sets a secondary build-output directory (name, not path) where by default there is none.&lt;/li&gt;
	&lt;li&gt;Note: both the &lt;code&gt;_hax_dir_build&lt;/code&gt; and &lt;code&gt;_hax_dir_deploy&lt;/code&gt; directory names will each (at runtime) be combined (via &lt;code&gt;&amp;nbsp;-&lt;/code&gt; dash) with the current &lt;a href=&quot;../basics/namedsetups.html&quot;&gt;setup name&lt;/a&gt; for the final &lt;i&gt;actual&lt;/i&gt; build-output directory name: hence in new projects the implicit-default value for &lt;code&gt;_hax_dir_build&lt;/code&gt; &amp;mdash;that is, &lt;code&gt;&lt;i&gt;build&lt;/i&gt;&lt;/code&gt;&amp;mdash; results in the &lt;i&gt;actual&lt;/i&gt; build-output directory name &lt;code&gt;&lt;i&gt;default-build&lt;/i&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry><entry>
        <title type="html">Named setups &amp;amp; multiple *.haxproj</title>
        <summary type="html">A near-empty &lt;code&gt;&lt;i&gt;default&lt;/i&gt;.haxproj&lt;/code&gt; file was &lt;a href=&quot;../basics/projdir.html#files&quot;&gt;created&lt;/a&gt; during project creation, as were a pre-authored &lt;code&gt;tmpl/&lt;i&gt;default&lt;/i&gt;.haxtmpl.html&lt;/code&gt; file and a &lt;code&gt;&lt;i&gt;default&lt;/i&gt;-build&lt;/code&gt; directory. Here&apos;s why they all share &lt;b&gt;default&lt;/b&gt; in their names and how &quot;setup names&quot; can be leveraged for more finegrained project experiments / variations.</summary>
        <link href="../basics/namedsetups.html"/><author><name>metaleap.github.io</name></author>
        <id>tag:metaleap.github.io,2016-12-05:haxtatic/basics/namedsetups.html</id>
        <updated>2016-12-05T00:00:00Z</updated>
        <content type="html">&lt;h1&gt;Named setups &amp;amp; multiple *.haxproj&lt;/h1&gt;

&lt;p class=&quot;up&quot;&gt;
	A near-empty &lt;code&gt;&lt;i&gt;default&lt;/i&gt;.haxproj&lt;/code&gt; file was &lt;a href=&quot;../basics/projdir.html#files&quot;&gt;created&lt;/a&gt; during project creation, as were a pre-authored &lt;code&gt;tmpl/&lt;i&gt;default&lt;/i&gt;.haxtmpl.html&lt;/code&gt; file and a &lt;code&gt;&lt;i&gt;default&lt;/i&gt;-build&lt;/code&gt; directory. Here&apos;s why they all share &lt;b&gt;default&lt;/b&gt; in their names and how &quot;setup names&quot; can be leveraged for more finegrained project experiments / variations.
&lt;/p&gt;
&lt;h2 id=&quot;Multiple *.haxproj&quot;&gt;Multiple *.haxproj&lt;/h2&gt;
&lt;p&gt;
	&lt;a href=&quot;../basics/projdir.html#run&quot;&gt;When &lt;i&gt;HaXtatic&lt;/i&gt; is run, it is at a minimum always given a project directory path to work in&lt;/a&gt;, but following that one required command-line argument there may be &lt;b&gt;any number of &lt;i&gt;*.haxproj&lt;/i&gt; file names&lt;/b&gt; (not paths, and separated via white-space). Only when these &lt;i&gt;aren&apos;t&lt;/i&gt; specified does &lt;i&gt;HaXtatic&lt;/i&gt; actually assume a single &lt;i&gt;default.haxproj&lt;/i&gt; is to be used.
&lt;/p&gt;
&lt;p&gt;
	So all the specified &lt;a href=&quot;../basics/haxproj.html&quot;&gt;*.haxproj&lt;/a&gt; files are loaded in sequence and combined-into-one in memory on the fly. This may result in later definitions overriding previous ones, which in turn can be really quite handy (once the need materializes).
&lt;/p&gt;
&lt;p&gt;
	If any one of these named files doesn&apos;t exist, it is quietly ignored. If &lt;i&gt;none&lt;/i&gt; of them exist, the above-mentioned fallback to &lt;i&gt;default.haxproj&lt;/i&gt; applies. If &lt;i&gt;that&lt;/i&gt; one doesn&apos;t exist, a minimalist pre-authored version is re-created to demonstrate just how seriously &lt;i&gt;HaXtatic&lt;/i&gt; takes all this.
&lt;/p&gt;
&lt;h2 id=&quot;Named setups&quot;&gt;Named setups&lt;/h2&gt;
&lt;p&gt;The above logic then easily gives rise to the concept of &quot;named setups&quot;, that is: multiple separate (differently named) sets of &lt;span class=&quot;hd-note&quot;&gt;&amp;nbsp;&lt;b&gt;&amp;lt;name&amp;gt;&lt;/b&gt;.haxproj&amp;nbsp;&amp;nbsp;+&amp;nbsp;&amp;nbsp;tmpl/&lt;b&gt;&amp;lt;name&amp;gt;&lt;/b&gt;.haxtmpl.html&amp;nbsp;&amp;nbsp;+&amp;nbsp;&amp;nbsp;&lt;b&gt;&amp;lt;name&amp;gt;-build&lt;/b&gt;/&amp;nbsp;&lt;/span&gt; co-residing in parallel within the project directory.&lt;/p&gt;
&lt;h3&gt;Why:&lt;/h3&gt;
&lt;p&gt;This may sound somewhat convoluted, but consider that &lt;i&gt;(despite this functionality emerging rather on a whim upon determining the real need for and utility of supporting multiple *.haxproj)&lt;/i&gt; there could certainly well exist use-cases where developing/generating a number of &quot;quite-similar-but-differing-in-various-minor-or-major-details&quot; versions/variations of a project &amp;mdash;from partially shared, partially differing contents, templates, snippets, settings&amp;mdash; is upon reflection ultimately called for. Happens to the best of them!&lt;/p&gt;
&lt;p&gt;Since most other variations can be finely controlled entirely via the &lt;i&gt;*.haxproj files&lt;/i&gt;, the &quot;named setup&quot; concept only affects these 3 entities of &lt;span class=&quot;hd-note&quot;&gt;&amp;nbsp;&lt;b&gt;&amp;lt;name&amp;gt;&lt;/b&gt;.haxproj&amp;nbsp;&amp;nbsp;+&amp;nbsp;&amp;nbsp;tmpl/&lt;b&gt;&amp;lt;name&amp;gt;&lt;/b&gt;.haxtmpl.html&amp;nbsp;&amp;nbsp;+&amp;nbsp;&amp;nbsp;&lt;b&gt;&amp;lt;name&amp;gt;-build&lt;/b&gt;/&amp;nbsp;&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;So what exactly &lt;i&gt;does&lt;/i&gt; &quot;name&quot; the current build setup then?&lt;/h3&gt;
&lt;p&gt;The &lt;i&gt;very first&lt;/i&gt; of all the specified &lt;i&gt;*.haxproj&lt;/i&gt; file names supplied over the command-line, as &lt;a href=&quot;#Multiple *.haxproj&quot;&gt;per above&lt;/a&gt; &amp;mdash; but existing or not, loaded or not: the first one names this setup! All this shows how new projects end up with the standard set of &lt;span class=&quot;hd-note&quot;&gt;&amp;nbsp;&lt;b&gt;default&lt;/b&gt;.haxproj&amp;nbsp;&amp;nbsp;+&amp;nbsp;&amp;nbsp;tmpl/&lt;b&gt;default&lt;/b&gt;.haxtmpl.html&amp;nbsp;&amp;nbsp;+&amp;nbsp;&amp;nbsp;&lt;b&gt;default-build&lt;/b&gt;/&amp;nbsp;&lt;/span&gt; &amp;mdash; the setup name falls back to &lt;b&gt;default&lt;/b&gt; absent any explicitly specified other &lt;i&gt;*.haxproj&lt;/i&gt; file names.&lt;/p&gt;
</content>
    </entry><entry>
        <title type="html">Syntactic rules (in places)</title>
        <summary type="html">Certain &lt;b&gt;directives&lt;/b&gt; (placed in &lt;a href=&quot;../basics/haxproj.html&quot;&gt;*.haxproj&lt;/a&gt; files or implied in &lt;a href=&quot;../basics/tmplsnip.html#snippets&quot;&gt;*.haxsnip.html&lt;/a&gt;s&apos; headers) and certain &lt;b&gt;haXtags&lt;/b&gt; (placed anywhere) &amp;mdash; specifically:</summary>
        <link href="../basics/syntax.html"/><author><name>metaleap.github.io</name></author>
        <id>tag:metaleap.github.io,2016-12-03:haxtatic/basics/syntax.html</id>
        <updated>2016-12-03T00:00:00Z</updated>
        <content type="html">&lt;h1&gt;Syntactic rules (in places)&lt;/h1&gt;
&lt;p&gt;
Certain &lt;b&gt;directives&lt;/b&gt; (placed in &lt;a href=&quot;../basics/haxproj.html&quot;&gt;*.haxproj&lt;/a&gt; files or implied in &lt;a href=&quot;../basics/tmplsnip.html#snippets&quot;&gt;*.haxsnip.html&lt;/a&gt;s&apos; headers) and certain &lt;b&gt;haXtags&lt;/b&gt; (placed anywhere) &amp;mdash; specifically:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;all &lt;a href=&quot;../basics/haxproj.html#bdecl&quot;&gt;|B| directives&lt;/a&gt; (following the Blok name)&lt;/li&gt;
	&lt;li&gt;all &lt;a href=&quot;../basics/haxproj.html#pdecl&quot;&gt;|P| directives&lt;/a&gt; (following the feed name)&lt;/li&gt;
	&lt;li&gt;the &lt;a href=&quot;../basics/haxproj.html#cdecl&quot;&gt;|C| directives&lt;/a&gt; &lt;code&gt;process:static:&lt;/code&gt; and &lt;code&gt;process:pages:&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;most &lt;a href=&quot;../basics/haxproj.html#xdecl&quot;&gt;|X| directives&lt;/a&gt; (except the 2 &lt;a href=&quot;../tags/x.html#demo&quot;&gt;demo&lt;/a&gt; X-renderers for coders)&lt;/li&gt;
	&lt;li&gt;some &lt;a href=&quot;../tags/x.html&quot;&gt;X-tags&lt;/a&gt; (determined and documented by the &lt;a href=&quot;../xtypes/index.html&quot;&gt;X-renderer&lt;/a&gt; invoked)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;mdash; absolutely &lt;b&gt;require&lt;/b&gt; &lt;span class=&quot;hd-note&quot;&gt;&amp;mdash;lest they render warning/error messages into generated output contents (or if so &lt;a href=&quot;../basics/haxproj.html#cmisc&quot;&gt;configured&lt;/a&gt;, abort the overall process abruptly, prematurely and entirely)&amp;mdash;&lt;/span&gt;
&lt;b&gt;strict adherence to the following&lt;/b&gt; (essentially trivial, still currently rather demanding-and-unforgiving thanks to the.. &quot;compactness&quot; of the parser) syntax rules:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;i&gt;All&lt;/i&gt; the properties shown (in the respective documentation topic) &lt;i&gt;need&lt;/i&gt; to appear,
		&lt;ul&gt;&lt;li&gt;each separated from the next via a &lt;code&gt;&amp;nbsp;,&lt;/code&gt; comma,&lt;/li&gt;
		&lt;li&gt;and in &lt;i&gt;the very same order&lt;/i&gt; showing up in documentation!&lt;/li&gt;&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;
		A &lt;b&gt;text value&lt;/b&gt; is enclosed in &lt;code&gt;&amp;nbsp;&amp;quot;&lt;/code&gt; quotation marks:
		&lt;ul&gt;&lt;li&gt;&lt;code&gt;= &amp;quot;&lt;i&gt;Wrote this in &lt;/i&gt;\&quot;&lt;i&gt;VBScript&lt;/i&gt;\&quot;&lt;i&gt; back in &apos;99..&lt;/i&gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;In-text (literal) line-breaks are supported; all standard escape sequences work predictably, eg. &lt;code&gt;&amp;nbsp;\&amp;quot;&lt;/code&gt;
		for in-text quotation marks etc.)&lt;/li&gt;
		&lt;li&gt;Any &lt;a href=&quot;../tags/index.html&quot;&gt;haXtags&lt;/a&gt; placed inside such quoted text-values (principally those that might output literal quotation marks,
		eg. markup-language attributes and such) should have the entire tag content (everything in between &lt;code&gt;&amp;nbsp;{&lt;i&gt;*&lt;/i&gt;&lt;!----&gt;|&lt;/code&gt;
		and &lt;code&gt;&amp;nbsp;|&lt;!----&gt;}&lt;/code&gt;) specially escaped by prefixing it with 2 &lt;code&gt;&amp;nbsp;`&lt;/code&gt; backticks:
		&lt;ul&gt;&lt;li&gt;ie. by changing &lt;code&gt;{T&lt;!----&gt;|&lt;i&gt;sometextname&lt;/i&gt;|&lt;!----&gt;}&lt;/code&gt;, &lt;code&gt;{P&lt;!----&gt;|1st:&lt;i&gt;div&lt;/i&gt;|&lt;!----&gt;}&lt;/code&gt;
		or &lt;code&gt;{X&lt;!----&gt;|&lt;i&gt;myctl:&lt;/i&gt;|&lt;!----&gt;}&lt;/code&gt;&lt;br/&gt;into &lt;code&gt;{T&lt;!----&gt;|``&lt;i&gt;sometextname&lt;/i&gt;|&lt;!----&gt;}&lt;/code&gt;, &lt;code&gt;{P&lt;!----&gt;|``1st:&lt;i&gt;div&lt;/i&gt;|&lt;!----&gt;}&lt;/code&gt;
		or &lt;code&gt;{X&lt;!----&gt;|``&lt;i&gt;myctl:&lt;/i&gt;|&lt;!----&gt;}&lt;/code&gt; respectively&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;A &lt;b&gt;tuple&lt;/b&gt; is a name-value pair or a 2-values pair, ie. two parts enclosed within &lt;code&gt;( )&lt;/code&gt; parentheses, both separated with
		a &lt;code&gt;&amp;nbsp;,&lt;/code&gt; comma, such as:
		&lt;ul&gt;
			&lt;li&gt;two text-values associated together, eg. an URL and its caption, or an attribute&apos;s name and its value:
				&lt;ul&gt;&lt;li&gt;&lt;code&gt;wrapHref = (&quot;&lt;i&gt;prefix here&lt;/i&gt;&quot; , &quot;&lt;i&gt;suffix here&lt;/i&gt;&quot;)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
			&lt;li&gt;two related on/off toggles:
				&lt;ul&gt;&lt;li&gt;&lt;code&gt;xmlEscape = (&lt;i&gt;False&lt;/i&gt; , &lt;i&gt;True&lt;/i&gt;)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;
		A &lt;b&gt;list&lt;/b&gt; is enclosed by &lt;code&gt;&amp;nbsp;[&lt;/code&gt; and &lt;code&gt;&amp;nbsp;]&lt;/code&gt; and may contain any number of either &lt;b&gt;text values&lt;/b&gt; (each
		separated from the next by a &lt;code&gt;&amp;nbsp;,&lt;/code&gt; comma), or &lt;b&gt;tuples&lt;/b&gt; (dito), or nothing at all:
		&lt;ul&gt;&lt;li&gt;&lt;code&gt;more = [&quot;&lt;i&gt;customfield1&lt;/i&gt;&quot; , &quot;&lt;i&gt;customfield2&lt;/i&gt;&quot; , &quot;&lt;i&gt;customfieldX&lt;/i&gt;&quot;]&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;more = []&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;attr = [ (&quot;&lt;i&gt;class&lt;/i&gt;&quot;,&quot;&lt;i&gt;pagelink&lt;/i&gt;&quot;) , (&quot;&lt;i&gt;href&lt;/i&gt;&quot;,&quot;{P&lt;!----&gt;|/&lt;i&gt;blog/index.html&lt;/i&gt;|&lt;!----&gt;}&quot;) ]&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;Other values&lt;/b&gt; (numbers, yes/no toggles, optionals and more) are explicitly documented separately for each property on
	the approriate topic page.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;Text-value&lt;/b&gt; properties shown in documentation &lt;i&gt;without&lt;/i&gt; enclosing &lt;code&gt;&amp;nbsp;&amp;quot;&lt;/code&gt; quotation marks and &lt;i&gt;with&lt;/i&gt; a
	&lt;code&gt;&amp;nbsp;=&amp;gt;&lt;/code&gt; connector (in place of the usual &lt;code&gt;&amp;nbsp;=&lt;/code&gt;) are in each and every instance
		&lt;ul&gt;&lt;li&gt;the &lt;i&gt;only&lt;/i&gt; text-value property in the directive/haXtag that may omit the enclosing quotation marks (and that then
		simply extends until the very end of the directive/haXtag)&lt;/li&gt;
		&lt;li&gt;but &lt;i&gt;only&lt;/i&gt; if that property&apos;s name is followed &lt;i&gt;immediately&lt;/i&gt; (no spaces) by exactly &lt;code&gt;=&amp;gt;&lt;/code&gt; in place of
		the usual &lt;code&gt;&amp;nbsp;=&lt;/code&gt; assignment operator.&lt;/li&gt;
		&lt;li&gt;No &lt;code&gt;&amp;nbsp;\&amp;quot;&lt;/code&gt; escaping of quotation marks required in here, also no &lt;a href=&quot;../tags/index.html&quot;&gt;haXtags&lt;/a&gt; in here require the above-mentioned &lt;code&gt;&amp;nbsp;``&lt;/code&gt; double-backtick escaping.&lt;/li&gt;
		&lt;li&gt;Such properties &lt;i&gt;may&lt;/i&gt; however, if somehow desired, also be written the same way as any other text value, that is with &lt;code&gt;= &amp;quot;..&amp;quot;&lt;/code&gt; plus any required inner escaping.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry><entry>
        <title type="html">Additional XML output files</title>
        <summary type="html">During processing, &lt;i&gt;HaXtatic&lt;/i&gt; may generate (when so set up &lt;i&gt;and&lt;/i&gt; fresh content changes indicate the need) additional XML output files of 2 kinds: &lt;i&gt;sitemap.xml&lt;/i&gt; and &lt;i&gt;*.atom&lt;/i&gt; feeds.</summary>
        <link href="../basics/xmlfiles.html"/><author><name>metaleap.github.io</name></author>
        <id>tag:metaleap.github.io,2016-12-01:haxtatic/basics/xmlfiles.html</id>
        <updated>2016-12-01T00:00:00Z</updated>
        <content type="html">&lt;h1&gt;Additional XML output files&lt;/h1&gt;
&lt;p class=&quot;up&quot;&gt;
	During processing, &lt;i&gt;HaXtatic&lt;/i&gt; may generate (when so set up &lt;i&gt;and&lt;/i&gt; fresh content changes indicate the need) additional XML output files of 2 kinds: &lt;i&gt;sitemap.xml&lt;/i&gt; and &lt;i&gt;*.atom&lt;/i&gt; feeds.
&lt;/p&gt;
&lt;h2 id=&quot;sitemap.xml&quot;&gt;sitemap.xml&lt;/h2&gt;
&lt;p&gt;
	uses &lt;a href=&quot;http://en.wikipedia.org/wiki/Sitemaps&quot;&gt;a trivial format&lt;/a&gt;, is cheap to generate and written to &lt;code&gt;/sitemap.xml&lt;/code&gt; during processing by default:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;this can be changed or disabled via a &lt;code&gt;|C|_hax_relpath_sitemap:&lt;/code&gt; &lt;a href=&quot;../basics/haxproj.html#cmisc&quot;&gt;&lt;i&gt;*.haxproj&lt;/i&gt; directive&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;All site pages are included in the resulting &lt;i&gt;sitemap.xml&lt;/i&gt; output file except pages associated with &lt;a href=&quot;../basics/bloks.html&quot;&gt;Bloks&lt;/a&gt; that have &lt;a href=&quot;../basics/haxproj.html#bdecl&quot;&gt;declared otherwise&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Each generated &lt;code&gt;loc&lt;/code&gt; value is &lt;i&gt;required&lt;/i&gt; (needlessly and wastefully so, but that&apos;s the format) to include a full domain-name and unless a custom &lt;code&gt;|C|_hax_domainname:&lt;/code&gt; &lt;a href=&quot;../basics/haxproj.html#cmisc&quot;&gt;&lt;i&gt;*.haxproj&lt;/i&gt; directive&lt;/a&gt; was explicitly declared, &lt;i&gt;HaXtatic&lt;/i&gt; falls back on the project-directory&apos;s name for that.&lt;/li&gt;
	&lt;li&gt;Each generated &lt;code&gt;priority&lt;/code&gt; value is guesstimated by a naive heuristic based loosely on page path length/depth/complexity and not currently user-customizable.&lt;/li&gt;
	&lt;li&gt;Each generated &lt;code&gt;lastmod&lt;/code&gt; value refers to the &lt;i&gt;custom-set page date&lt;/i&gt; &lt;b&gt;only&lt;/b&gt; if that was &lt;a href=&quot;../basics/datetime.html#fname&quot;&gt;explicitly encoded in the content source file&apos;s name&lt;/a&gt;, otherwise it falls back to the content source file&apos;s currently set &quot;&lt;i&gt;last modified&lt;/i&gt;&quot; timestamp.&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&quot;blokatoms&quot;&gt;&lt;h2 id=&quot;*.atom files for Bloks&quot;&gt;*.atom files for Bloks&lt;/h2&gt;&lt;/span&gt;
&lt;p&gt;
	Whether and where these are written is specified in a |B| directive&apos;s &lt;code&gt;atomFile&lt;/code&gt; &lt;a href=&quot;../basics/haxproj.html#bdecl&quot;&gt;property&lt;/a&gt;. Every page associated with the Blok is (during generation of its corresponding &lt;i&gt;*.atom&lt;/i&gt; feed) translated in its entirety into one equivalent &lt;code&gt;&amp;lt;entry&amp;gt;&lt;/code&gt; (of course sans the &lt;a href=&quot;../basics/tmplsnip.html&quot;&gt;outer template&lt;/a&gt;). To not reprocess all &lt;a href=&quot;../tags/index.html&quot;&gt;haXtags&lt;/a&gt; for each, a cached (already-processed and thus haXtag-free) in-memory version of the page content is used for that. However, &lt;i&gt;that&lt;/i&gt; in turn forced &lt;i&gt;HaXtatic&lt;/i&gt; to reprocess and re-generate (prior to generating any &lt;i&gt;*.atom&lt;/i&gt;s) &lt;i&gt;any and all&lt;/i&gt; pages that will end up in any &lt;i&gt;*.atom&lt;/i&gt; feed determined to need re-generation during this run. This behavior will be improved in the future.
&lt;/p&gt;
&lt;h2 id=&quot;*.atom files for |P| &amp;quot;feeds&amp;quot;&quot;&gt;*.atom files for |P| &amp;quot;feeds&amp;quot;&lt;/h2&gt;
&lt;p&gt;
	These are not by default generated unless a &lt;code&gt;|C|_hax_relpath_postatoms:&lt;/code&gt; &lt;a href=&quot;../basics/haxproj.html#cmisc&quot;&gt;&lt;i&gt;*.haxproj&lt;/i&gt; directive&lt;/a&gt; explicitly specifies a site-root-relative (aka. build-directory-relative) path to the location they should be written to (can be &lt;code&gt;&amp;nbsp;/&lt;/code&gt; too). One such output file is then generated there per every &lt;a href=&quot;../basics/haxproj.html#pdecl&quot;&gt;&quot;feed&quot;&lt;/a&gt; (auto-named &lt;code&gt;&lt;i&gt;&amp;lt;feed-name&amp;gt;&lt;/i&gt;.atom&lt;/code&gt;). All the content/meta-data for each &quot;post&quot; belonging to the &quot;feed&quot; is translated into one equivalent &lt;code&gt;&amp;lt;entry&amp;gt;&lt;/code&gt;.
&lt;/p&gt;
</content>
    </entry>
</feed>