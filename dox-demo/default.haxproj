turn on whatever syntax highlighting for eased grokkage..
	no special comments syntax supported,
	no random comments after the first |_| directive, which follows:


|C|process:pages:
	skip=[], force=["*"], dirs=[]
|C|hax_onparseerror: abort

|T|_hax_dir_cache:


|B|basics:
	title="Basics", atomFile="", blokIndexPageFile="basics/index.html", inSitemap=True, dtFormat="", desc=>
	<p>This material may appear "unduly exhaustive" at first glance, but this is all blatantly-simple-stuff and
	mostly just spelled out in (almost) every last minor detail for completeness and future reference.</p>
	<p>Notably no article on <b>"how to author pages"</b>. That's because there's nothing to it once a quick note is made of
	{X|lb:projdir where to place them|}, {X|lb:tmplsnip which outer-template is applied during processing &amp; how|}, as well as the
	diverse range of {X|lt:index haXtags|} that any page (indeed any user-authored/-customized file in a project) may embed and
	combine in any manner.</p>


|B|tags:
	title="haXtags", atomFile="", blokIndexPageFile="tags/index.html", inSitemap=True, dtFormat="", desc=>

	<p>Embed {T|Hax|} tags anywhere in source contents, {X|lb:tmplsnip templates, snippets|} or {X|lb:haxproj *.haxproj|} files with
	a simple notation: <code>{<i>Prefix</i>|<i>Name</i>|<!---->}</code> or
	<code>{<i>Prefix</i>|<i>Name</i>: <i>Args</i>|<!---->}</code>.</p>
	<p>Example: <code>{P<!---->|date|<!---->}</code> outputs in-place the currently set {X|lb:datetime Page Date|} &mdash;using the
	built-in fallback date-time format since none was specified in the tag&mdash; when it is processed: {X|note:{P|date|}|}.</p>
	<ul><li>All unprocessed haXtags (mispelled etc.) simply remain in the output, aiding swift detection<ul><li>(exception: some X-tags requiring
		{X|lb:syntax syntax|} &mdash; if unprocessable these output error details)</li></ul></li>
	<li>Any haXtags may embed/output any other haXtags freely both in their definitions and invocations but
	<ul><li>an otherwise-correct outer tag will typically not render with a (directly embedded) unprocessable inner tag (a "known non-issue")</li>
	<li>a direct-or-indirect recursive self-reference (self-invocation inside "defining portion" of a haXtag's related {X|lb:haxproj declaration
	directive|}) will hang (and usually eventually prematurely abort with a {X|c:&lt;&lt;loop&gt;&gt;|} farewell message) the entire generating process</li></ul></li>
	<li>Available "prefixes" (or <i>haxTag types</i>) are (in order of simplicity) <b>T</b>, <b>B</b>, <b>P</b> and <b>X</b>:</li></ul>


|B|xtypes:
	title="X-renderers", atomFile="", blokIndexPageFile="xtypes/index.html", inSitemap=True, dtFormat="", desc=>
	<p>The X-men x-tender-render-er-ers</p>



|T|Hax:			HaXtatic
|T|SiteTitle:	{T|Hax|} Docs
|T|XdemoInfo:	<hr/><p class="hd-note">This "slightly pointless" X-renderer exists solely to serve as a
				<a href="https://github.com/metaleap/haxtatic/blob/master/src/X/{P|fileBaseName|}.hs">code sample</a> to start from for Haskell programmers
				wanting to develop custom X-renderers within the {T|Hax|} code-base.</p>



|X|hax.image:doxpic: {P| /pics/otiosely/long/path |}: linkAtts=[], imgAtts=[]
|X|hax.miniTag:c: code
|X|hax.miniTag:h: h2: htmlAtts=[("id" , "{%:content:%}")]
|X|hax.miniTag:note: span: htmlAtts=[("class" , "hd-note")]
|X|hax.link:lb: {P| /basics |}: htmlAtts = [] , htmlEsc = (False , False) , uriAutoExt = ".html"
|X|hax.link:lt: {P| /tags |}: htmlAtts = [] , htmlEsc = (False , False) , uriAutoExt = ".html"
|X|hax.link:lx: {P| /xtypes |}: htmlAtts = [] , htmlEsc = (False , False) , uriAutoExt = ".html"

|X|hax.links:doxtopnav:li:
	 htmlAtts = [("class","hd-nav"),("&class","hd-nav-sel")],
		 itemsFirst = [("" , "Intro")],
		 itemsLast = [("xtypes/" , "{B|title:xtypes|}")],
	 wrapHref = ("{P|/" , "index.html|}")

|X|hax.pageAnchors:doxpagetoc:h2:
	considerEmpty = 1, htmlIfEmpty = "<style type='text/css'>.hd-toc { display: none; }</style>"

|X|hax.repeat:doxindex:
	prefix = "<ul class=\"hd-feed\"><li>{", suffix = "}</li></ul>", joinwith = "}</li><li>{",
	content=""

|X|hax.repeat:xdescs:
	prefix = "{", suffix = "}", joinwith = "}{",
	content = ""




|P|xdesc:
	dt = "1234-12-15", cat = "demoSimplest", title = "", link = "",
	more = [ ("declmore" , ""),
			 ("cfgmore" , "(no settings)"),
			 ("usage" , "") ],
	content=>
	Outputs <code>&lt;h1&gt;Hello World!&lt;/h1&gt;</code>.

|P|xdesc:
	dt = "1234-11-15", cat = "demoCfgArgs", title = "", link = "",
	more = [ ("declmore" , "</code> or <code>|X|hax.demoCfgArgs:<i>myXtag</i>:<i>greetname</i>"),
			 ("cfgmore" , "(no other settings)"),
			 ("usage" , "|<!---->}</code> or <code>{X<!---->|<i>myXtag</i>:<i>greetname</i>") ],
	content=>
	Outputs <code>&lt;h1&gt;Hello, <i>greetname</i>!&lt;/h1&gt;</code>.

|P|xdesc:
	dt = "1234-10-15", cat = "miniTag", title = "", link = "",
	more = [ ("declmore" , ":<i>somehtmltag</i>: <i>..</i>"),
			 ("cfgmore" , "{X|c:htmlAtts|}"),
			 ("usage" , ":<i> tag's inner-markup content </i>") ],
	content=>
	Outputs {X|c: &lt;<i>somehtmltag ..</i>&gt;<i>tag's inner-markup content</i>&lt;/<i>somehtmltag</i>&gt; |}.

|P|xdesc:
	dt = "1234-09-15", cat = "image", title = "", link = "",
	more = [ ("declmore" , ":<i>some/rel/base/path</i>: <i>..</i>"),
			 ("cfgmore" , "{X|c:linkAtts|}, {X|c:imgAtts|}"),
			 ("usage" , ":<i>rel-to-base/path/no/whitespace and optionally some description text</i>") ],
	content=>
	Outputs {X|c: &lt;img <i>..</i> /&gt; |} or {X|c: &lt;a <i>..</i>&gt;&lt;img <i>..</i> /&gt;&lt;/a&gt; |}.

|P|xdesc:
	dt = "1234-08-25", cat = "link", title = "", link = "",
	more = [ ("declmore" , ":<i>some/rel/base/path</i>: <i>..</i>"),
			 ("cfgmore" , "{X|c:htmlAtts|} , {X|c:htmlEsc|} , {X|c:uriAutoExt|} "),
			 ("usage" , ":<i>rel-to-base/path/no/whitespace and then the link text text</i>") ],
	content=>
	Outputs {X|c: &lt;a <i>..</i>&gt;<i>..</i>&lt;/a&gt; |}.

|P|xdesc:
	dt = "1234-08-15", cat = "links", title = "", link = "",
	more = [ ("declmore" , ":<i>outerhtmltag</i>: <i>..</i>"),
			 ("cfgmore" , "{X|c:htmlAtts|}, {X|c:itemsFirst|}, {X|c:itemsLast|}, {X|c:wrapHref|}"),
			 ("usage" , ": items = [..] , htmlAtts = [..]") ],
	content=>
	Outputs a sequence of {X|c: &lt;a ..&gt; .. &lt;/a&gt; |} or
	{X|c: &lt;<i>outerhtmltag</i> ..&gt;&lt;a ..&gt; .. &lt;/a&gt;&lt;/<i>outerhtmltag</i>&gt; |} in a uniform manner.

|P|xdesc:
	dt = "1234-07-15", cat = "pageAnchors", title = "", link = "",
	more = [ ("declmore" , ":<i>gatherhtmltag</i>: <i>..</i>"),
			 ("cfgmore" , "{X|c:considerEmpty|}, {X|c:htmlIfEmpty|}"),
			 ("usage" , ":<i>outerhtmltag</i>: htmlAtts = [..]") ],
	content=>
	Outputs a sequence of {X|c: &lt;<i>outerhtmltag</i> ..&gt;&lt;a ..&gt; .. &lt;/a&gt;&lt;/<i>outerhtmltag</i>&gt; |}, one
	per {X|c: &lt;<i>gatherhtmltag</i>&gt; |} element found in the page's content source.

|P|xdesc:
	dt = "1234-06-15", cat = "snippet", title = "", link = "",
	more = [ ("declmore" , ": <i>..</i>"),
			 ("cfgmore" , "{X|c:vars|}, {X|c:flags|}, {X|c:content|}"),
			 ("usage" , ": vars = [..], flags = [..], content = &quot;..&quot;") ],
	content=>
	Outputs the content of the named snippet with the specified variable substitutions.

|P|xdesc:
	dt = "1234-05-15", cat = "repeat", title = "", link = "",
	more = [ ("declmore" , ": <i>..</i>"),
			 ("cfgmore" , "{X|c:prefix|}, {X|c:suffix|}, {X|c:joinwith|}, {X|c:content|}"),
			 ("usage" , ": over = .. , wrapEach = .. , order = .. , skip = .. , limit = .. , more = ..") ],
	content=>
	Outputs a sequence of contents enumerated by the specified iterator.
