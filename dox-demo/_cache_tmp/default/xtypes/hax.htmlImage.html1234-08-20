<h1>hax.htmlImage</h1>
	
	<p class="up">Outputs <code>&lt;img <i>..</i> /&gt;</code> or <code>&lt;a <i>..</i>&gt;&lt;img <i>..</i> /&gt;&lt;/a&gt;</code>.</p>
	<h2 id="In a nutshell">In a nutshell</h2>
	<ol>
		<li class="up">
			<a href="../xtypes/hax.htmlImage.html#decl">Declaration</a> of an <code>|X|hax.htmlImage:<u><i>myTag</i></u>:<i>some/rel/base/path</i>: <i>..</i></code> directive in a
			<a href="../basics/haxproj.html#xdecl">*.haxproj</a> file,
			<ul><li>further configuring: <code>attrLink</code>, <code>attrImg</code>, <code>xmlEscape</code></li></ul>
		</li>
		<li>Usage anywhere: <code>{X<!---->|<u>myTag</u>:<i>rel-to-base/path/no/whitespace and optionally some description text</i> |<!---->}</code></li>
	</ol>
<h3>Stage:</h3><p><a href="../tags/index.html#stages">Early</a> &mdash; this X-renderer does not require a page context for
					rendering: therefore many <i>hax.htmlImage</i>-invoking X-tags encountered during pre-templating (at
					start-up time) may be eagerly <a href="../tags/index.html#Processing">processed</a> immediately in-place (for overall-reduced
					per-page processing loads).</p>
<h2 id="Purpose">Purpose</h2>
<p>
	In a similar spirit to <a href="../xtypes/hax.miniTag.html">hax.miniTag</a> and <a href="../xtypes/hax.htmlLink.html">hax.htmlLink</a>, this one is for saving precious
	keystrokes with <code>&lt;img ..&gt;</code>-rich HTML contents requiring repetetive use of quickly-becoming-too-verbose markup.
</p>
<span id="decl"><h2 id="Declaration / Configuration">Declaration / Configuration</h2></span>
<p>To demonstrate valid <a href="../basics/haxproj.html#xdecl">*.haxproj</a> directives declaring <i>hax.htmlImage</i>
					<a href="../tags/x.html">X-tags</a>:</p>
<pre>
|X|hax.htmlImage:<i>logo</i>:
	<i>../pics/logos</i>

|X|hax.htmlImage: <i>photo</i> : <i>{P<!---->|/pics/photos/|<!---->}</i>:
	attrLink = [ <i>("class","foo-photo")</i> ],
	attrImg = [<i>("class" , "foo-roundborder")
		, ("onload","myGallerize(this)")</i>
		],
	xmlEscape = True
</pre>
<p>To elaborate, for example the last one of the above, as all <a href="../basics/haxproj.html#xdecl">|X| directives</a> declaring <a href="../tags/x.html">X-tags</a> do:</p>
	<ul>
		<li>begins with <code>|X|</code> followed by the X-renderer identifier (here <code>hax.htmlImage</code>)</li>
		<li>followed by <code>&nbsp;:</code> colon and the desired X-tag name to be used to invoke it (here <code>photo</code>),</li>
		<li>followed by <code>&nbsp;:</code> colon and now <i>hax.htmlImage</i>-<b>specific</b> configuration:</li>
		<li>The relative base path for all images from this X-tag (here
										<a href="../tags/p.html#relpaths">ensuring root-relative</a>:
										<code>{P<!---->| /pics/photos |<!---->}</code>),</li>
		<li>followed by a <code>&nbsp;:</code> colon if an <b>optional</b> <a href="../basics/syntax.html">syntax-sensitive</a> properties block follows,
					comprised (if present at all) of <i>all</i> the following properties in <i>this</i> very order:<ol><li><code>attrLink = [ <i>..</i> ]</code> &mdash; a List of all the tag attributes (each denoted in a
	<code>("<i>name</i>","<i>value</i>")</code> pair) to <i>always</i> append (in addition to automatic <code>href</code> and <code>title</code>)
	to the outer <code>&lt;a&gt;</code> element <ul><li>if empty (the default), no such outer <code>&lt;a&gt;</code> element will be rendered
	(only the <code>&lt;img&gt;</code> element itself)</li></ul></li>
	<li><code>attrImg = [ <i>..</i> ]</code> &mdash; a List of all the tag attributes (each denoted in a <code>("<i>name</i>","<i>value</i>")</code>
	pair) to <i>always</i> append (in addition to automatic <code>src</code> and <code>alt</code>) to the inner <code>&lt;img&gt;</code> output by
	all instances of this X-tag</li>
	<li><code>xmlEscape = ..</code> &mdash; either <code>False</code> (the default) or <code>True</code>; whether to auto-HTML/XML-escape
	the automatic <code>title</code> / <code>alt</code> attribute values</li></ol></li>
	</ul>
<span id="args"><h2 id="Invocation / Parameters">Invocation / Parameters</h2></span>
<p>
	Usage for the above example: <code>{X<!---->|photo:<i>eire%202016/IMG_5.jpg Look, a 'geysir'!</i> |<!---->}</code> would output,
	depending on the current-page URL, perhaps something like:
	<code>&lt;a class="<i>foo-photo</i>" href="<i>../pics/photos/eire%202016/IMG_5.jpg</i>"
	title="<i>Look, a &amp;apos;geysir&amp;apos;!</i>"&gt;
	&lt;img class="<i>foo-roundborder</i>" onload="<i>myGallerize(this)</i>" src="<i>../pics/photos/eire%202016/IMG_5.jpg</i>"
	alt="<i>Look, a &amp;apos;geysir&amp;apos;!</i>" /&gt;&lt;/a&gt;</code> &mdash; verbose! It follows that:
</p>
<ul>
	<li>the (X-tag-)relative image path comes first, followed optionally</li>
	<li>by <b>a white-space</b> and any manner of picture description, if any;</li>
	<li>any white-space in the picture URI path is to be replaced, as is standard, with <code>%20</code>;</li>
	<li>if <code>xmlEscape</code> is <code>False</code>, the picture description <b>has</b> to be provided HTML-escaped: manually or wrapped
	inside an <a href="../xtypes/hax.xmlEscape.html">hax.xmlEscape</a></li>
</ul>
