<h1>hax.noOp</h1>
	
	<p class="up">Outputs either the given content exactly-as-specified, or ignores it and outputs the pre-configured "constant" content.</p>
	<h2 id="In a nutshell">In a nutshell</h2>
	<ol>
		<li class="up">
			<a href="../xtypes/hax.noOp.html#decl">Declaration</a> of an <code>|X|hax.noOp:<u><i>myTag</i></u></code> or <code>|X|hax.noOp:<i>myTag</i>:<i>constant-content-here</i></code> directive in a
			<a href="../basics/haxproj.html#xdecl">*.haxproj</a> file,
			<ul><li>further configuring: <i>(no other settings)</i></li></ul>
		</li>
		<li>Usage anywhere: <code>{X<!---->|<u>myTag</u>: <i>any content to output or discard here</i> |<!---->}</code></li>
	</ol>
<span id="decl">
<p class="hd-note">This topic is in a compact format for users already familiar with the essentials of
					<a href="../basics/haxproj.html#xdecl">declaring</a> X-tags and invoking them. If found challenging, try the
					<a href="../xtypes/hax.miniTag.html">more</a>-<a href="../xtypes/hax.htmlImage.html">elaborate</a>-<a href="../xtypes/hax.htmlLink.html">and</a>-<a href="../xtypes/hax.xmlEscape.html">introductory</a>
					topics first to form a better grasp on the basics and overall mechanisms.</p>
<h3>Stage:</h3><p><a href="../tags/index.html#stages">Early</a> &mdash; this X-renderer does not require a page context for
					rendering: therefore many <i>hax.noOp</i>-invoking X-tags encountered during pre-templating (at
					start-up time) may be eagerly <a href="../tags/index.html#Processing">processed</a> immediately in-place (for overall-reduced
					per-page processing loads).</p>
</span>
<h2 id="Purpose">Purpose</h2>
<p>
	The same as that of the very common <code>id</code> and <code>const</code> functions in idiomatic pure functional programming.
</p>
