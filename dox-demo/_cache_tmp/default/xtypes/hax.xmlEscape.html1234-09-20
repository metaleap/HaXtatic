<h1>hax.xmlEscape</h1>
	
	<p class="up">Outputs the given content with all occurrences of any of <code>&amp; &lt; &gt; &quot; &apos;</code> each appropriately
	entity-escaped for safe inclusion in HTML/XML/etc. markup.</p>
	<h2 id="In a nutshell">In a nutshell</h2>
	<ol>
		<li class="up">
			<a href="../xtypes/hax.xmlEscape.html#decl">Declaration</a> of an <code>|X|hax.xmlEscape:<u><i>myTag</i></u></code> directive in a
			<a href="../basics/haxproj.html#xdecl">*.haxproj</a> file,
			<ul><li>further configuring: <i>(no other settings)</i></li></ul>
		</li>
		<li>Usage anywhere: <code>{X<!---->|<u>myTag</u>: <i>any &quot;content&apos; to &lt;&gt; XML&amp;HTML-escape</i> |<!---->}</code></li>
	</ol>
<span id="decl">
<h3>Stage:</h3><p><a href="../tags/index.html#stages">Early</a> &mdash; this X-renderer does not require a page context for
					rendering: therefore many <i>hax.xmlEscape</i>-invoking X-tags encountered during pre-templating (at
					start-up time) may be eagerly <a href="../tags/index.html#Processing">processed</a> immediately in-place (for overall-reduced
					per-page processing loads).</p>
</span>
<h2 id="Purpose">Purpose</h2>
<p>
	As a general principle, <b>none</b> of the built-in X-renderers <b>ever</b> HTML/XML-escape, <i>of their own accord</i>
	(unless expressly set up to do so on specific occasions), any of their generated outputs derived from project inputs:
	users are expected to specify such inputs already-escaped as the project's / file's output format demands.
</p>
<p>
	As such, some projects might for example require XML/HTML-escaping other <a href="../tags/index.html">haXtag</a> outputs
	dynamically/selectively after-the-fact; such is accomplished by embedding them inside a <b>hax.xmlEscape</b> X-tag.
</p>
