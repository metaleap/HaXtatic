<h1>Intro</h1>

<p class="up">These are the user docs on <i>HaXtatic</i>: another <i>*ahem*</i> <b>static site generator</b>.</p>
<p class="up">So basically like good ole Macromedia Dreamweaver or Microsoft FrontPage just without the GUI. <i>Kewl</i> huh? We're all command-line jocks anyway now.</p>
<p><a href="http://github.com/metaleap/haxtatic/tree/master/src">Programmed &amp; maintained in Haskell</a>, and documented <a href="http://github.com/metaleap/haxtatic/tree/master/dox-demo">in</a> <i>HaXtatic</i>, by <a href="http://metaleap.net">me</a>.</p>
<h2 id="In 1 paragraph (okay, now 6)">In 1 paragraph (okay, now 6)</h2>
<p><b>To summarize, in one lean handy package we get:</b> <a href="basics/tmplsnip.html#snippets">"controls"</a> (aka. "components" aka. sub-templates aka. parametric-snippets aka. what-have-you-lets) &mdash; <a href="xtypes/hax.iterator.html">iterating renderers</a> &mdash; HTML <a href="tags/x.html#hax.miniTag">short</a>-<a href="tags/x.html#hax.htmlLink">hand</a> <a href="tags/x.html#hax.htmlImage">helper</a> (haX)tags &mdash; <a href="xtypes/hax.htmlLinks.html">navigation</a> <a href="xtypes/hax.htmlAnchors.html">helpers</a> &mdash; <a href="tags/p.html">page context / page metadata haXtags</a> &mdash; mix-and-match-and-combine-and-nest any haXtags &mdash; embed haXtags anywhere (source contents, <a href="basics/tmplsnip.html">templates</a>/<a href="basics/tmplsnip.html#snippets">snippets(-aka.-controls)</a>, <a href="basics/haxproj.html">project/config file</a>) &mdash; some almost-enough-for-a-coder's-minimalist-blog-or-three "section-of-related-pages" notion called <a href="basics/bloks.html">"Bloks"</a> &mdash; globally shared (even-simpler-than-controls) <a href="tags/t.html">textual/markup snippets</a> of course &mdash; custom <a href="tags/p.html#Custom">per-page variables</a> &mdash; commonly desirable <a href="basics/xmlfiles.html">XML outputs</a> (<i>sitemap.xml</i>, <i>*.atom</i>) &mdash; mod-time-differential rebuilds &mdash; per-page caching across runs &mdash; of course <a href="basics/tmplsnip.html">per-file-type templating</a> &mdash; composable <a href="basics/namedsetups.html">"named setups"</a> &mdash; <a href="basics/haxproj.html">extensive configurability</a> &mdash; some notion of <a href="basics/haxproj.html#pdecl">"postings"/"simpleton data records"/"static tweets" micro-content definitions</a> (with fully custom rendering) &mdash; easily defined, easily applied <a href="basics/datetime.html#dtformats">custom date-time formats</a> ...</p>
<p><small>[ That's without touching the code-base. There's an IMHO lean and insta-grok'able extensibility mechanism for coding up custom output rendering flows &amp; logic in Haskell, too. Though <i>HaXtatic</i>'s combination of <a href="xtypes/index.html">built-in renderers</a> combined with its <a href="tags/index.html">nestable haXtags</a> and <a href="basics/tmplsnip.html#snippets">custom-parametric-markup-snippets</a> (aka. "controls"/"components") covers a profoundly wide spectrum of needs (incl. looping over various ranges) already, except branching &mdash; that one just hasn't come up yet, thankfully. ]</small></p>
<p><b>No "routes"</b> or some such notion. That's just.. <i>newfangled</i>.</p>
<p>Of course, <b>no "MarkDown" either</b>. If the occasional angle bracket or named entity baffles you, enjoy the sensation, or set up a separate .md-to-.html process for that, or (most likely) just go with the countless other site-gens.</p>
<p>To top it off, <b>no embedded-local-web-server either</b>. For a static site?! Get outa'town. (Emitting correct relative URLs that also work locally without a server is <a href="tags/p.html#relpaths">easy enough</a> if you <i>must</i> have content pages inside sub-directories &mdash; and haXtags can be placed and processed inside CSS/JS files too.)</p>
<p>Git(Hub) integration? Docker play&amp;pluggery? Content-aware on-the-fly dependency tracking via embedded PhD-thesis with Van Schlauberg ad-hoc proofs and Nodejs hooks? Type-safe <i>everything</i>? <b>Uh-huh.</b> Ain't nobody got time for tomfoolery!</p>
<h2 id="&quot;Quick&quot; start">&quot;Quick&quot; start</h2>
<ol>
	<li>Fetch the <a href="http://github.com/metaleap/haxbase">haxbase</a> and <a href="http://github.com/metaleap/haxtatic">haxtatic</a> repos from GitHub</li>
	<li>
		Build once with <a href="http://docs.haskellstack.org/en/stable/install_and_upgrade/">Stack</a> (a one-off 10-15 MB download)
		<ul>
			<li>eg. <code><span>~/gitrepos/metaleap/haxtatic/</span>$ stack install</code> should suffice <ul><li>(unlike all future runs of <code>stack</code>, this very first run will take a while and possibly output countless semi-obscure progress notices, as a fresh <code>stack</code> first fetches the appropriate Haskell compiler (several~100s MB) &mdash; a one-off expense)</li></ul></li>
		</ul>
	</li>
	<li>Now try eg. <code><span>~/gitrepos/metaleap/haxtatic/</span>$ stack exec haxtatic</code> to hopefully see a little greeting with a notice such as <code>No project-directory path supplied</code>. Good! Now try just <code><span>~</span>$ haxtatic</code>, if this works the same, even better as it "installed" (copied the binary) to somewhere on your <code>PATH</code>.</li>
	<li>Now run <code>haxtatic ~/mydemosite.foo</code> (or alternatively, as per above, <code>stack exec haxtatic ~/mydemosite.foo</code>), then explore the <a href="basics/projdir.html#Get%20started">freshly generated and populated</a> <code>mydemosite.foo</code> project-directory to grasp the bare essentials from the pre-created default single-page site in there.</li>
	<li>Dig through <a href="http://github.com/metaleap/haxtatic/tree/master/dox-demo">the project-directory for this very Docs site</a> (or indeed skim over these here docs!) to figure out most-of-the-rest.</li>
</ol>
<h2 id="In context">In context</h2>
<p>
	<b>Hacked-together for hacking-together some fine sites</b> the (frankly imaginary) "old-school way" &mdash; certainly a rather hacky way &mdash; and honestly among all the alternatives possibly <i>only</i> remotely, mildly "more compelling" in case you wish to (or have to) command some awfully-convoluted-templating powers and optionally &mdash;in a pinch, as a last resort&mdash; are content to code up at least simple short pieces of <a href="http://haskell.org">Haskell</a> (starting from <a href="http://github.com/metaleap/haxtatic/blob/master/src/X/DemoSimplest.hs">this</a> or <a href="http://github.com/metaleap/haxtatic/blob/master/src/X/DemoCfgArgs.hs">this</a>) &mdash; I wrote it from the ground up with easy-speedy, "done-and-done" future (rendering) extensibility chiefly in mind.
</p>
<h3>Not that you should have to for most needs, though!</h3>
<p>&mdash; except perhaps for the most exotic of uses (or "abusing" it for other neatly-hacky text-to-text / bulk transformations).. <b>this tool <i>does</i> actually accomplish quite a lot</b> without really needing to touch its codebase &mdash; just have to turn <a href="basics/haxproj.html">config-file</a> warrior and in places wrestle moderate amounts of trivial-yet-unforgiving <a href="basics/syntax.html">syntax</a> &mdash; alas you'll have to run-from-source (or compile from scratch) no less.. for no good reason other than plain inertia on my part. (Redistributing precompiled executable binaries of my open-source work for various platforms hasn't made it onto my exhaustive list of <i>actual priorities</i>. Though emitting overly wordy verbiage in software documentation <i>has</i>, apparently, unwittingly. Confound it!)</p>
<h2 id="Performance">Performance</h2>
<p>
<i>HaXtatic</i> performs "incremental"/"differential" rebuilds by default, so just changing a single content-source file will only re-generate that (or with a Blok page, the entire Blok). Changing a template causes rebuilding of every file (by default from a cached pre-processed version) utilizing that template. Changing *.haxproj or *.haxsnip.html files causes a "full" rebuild (also invalidating/overwriting all cached files).
</p>
<p>
On my machine (mid-2014 Thinkpad, Windows 8.1 64bit), HaXtatic consistently reports for a <i>full</i> rebuild (assuming no static-files have changed, and with page-caching disabled &mdash; it's enabled <a href="basics/haxproj.html#cmisc">by default</a>) of this very documentation site:
</p>
<pre>
Wrote 35 files in 0.42s:
	0.03s pre-templating &amp planning
	0.29s page templating &amp generation (30x ~0.009s)
	0.09s XML file generation (5x ~0.018s)
	0s misc. &amp file-copying
</pre>
<p>
With page-caching enabled (the default), per-page cost is about halved (for "differential" rebuilds as per above). Another example, a <i>full</i> rebuild of the publicly visible parts of <a href="http://metaleap.net">metaleap.net</a> (no static-file changes) routinely gives:
</p>
<pre>
Wrote 21 files in 0.46s:
	0.05s pre-templating &amp; planning
	0.36s page templating &amp; generation (19x ~0.019s)
	0.04s XML file generation (2x ~0.022s)
	0s misc. &amp; file-copying
</pre>
<p>
In this case, enabled page-caching only improves per-page cost to ~0.013s so the gain very much depends on the overall project, content characteristics, main-template complexity/functionality and such; of course there will always be in principle <i>some</i> slight gain for all subsequent differential rebuilds.
</p>
<p>
So from the above and some other experimental/test sites, on my machine/architecture/OS combination, I can consistently expect "about 40-50 files generated per second". Not "stellar" but certainly <i>mighty fine</i> for the intended uses. Differential rebuilds of course cut down the total number of files to re-generate.
</p>
